{"Abs":{"title":"Abs","returnType":"int","paramData":["int","value"],"params":1,"optional":true,"desc":"Returns the absolute value of the given parameter, ignoring the sign of the value."},"AbsX":{"title":"AbsX","returnType":"int","paramData":["int","x"],"params":1,"optional":true,"desc":"If called from an object, this function returns the given X coordinate relative to the object's center. Otherwise, the original coordinate is returned."},"AbsY":{"title":"AbsY","returnType":"int","paramData":["int","y"],"params":1,"optional":true,"desc":"If called from an object, this function returns the given Y coordinate relative to the object's center. Otherwise, the original coordinate is returned."},"ActIdle":{"title":"ActIdle","returnType":"bool","paramData":[],"params":0,"desc":"Checks whether an object is currently performing an activity."},"AddCommand":{"title":"AddCommand","returnType":"bool","paramData":["string","command","object","target","int","x","int","y","object","target2","int","delay","any","Data","int","retries","int","base_mode"],"params":9,"optional":true,"desc":"Adds a command to the top of the command stack of an object (also see AppendCommand). This command will be executed first, then the object will continue with the existing commands. If the command stack is empty, AddCommand does the same as SetCommand.For the list of commands see SetCommand."},"AddEffect":{"title":"AddEffect","returnType":"proplist","paramData":["string","name","object","target","int","priority","int","timer","object","command_target","id ","command_target_id","any","var1","any","var2","any","var3","any","var4"],"params":10,"optional":true,"desc":"Creates an effect. Returns the effect if successful or nil if not (e.g. because the effect was rejected). If the effect was accepted by another effect which is deleting itself within the same call, the return value is probably nil."},"AddMenuItem":{"title":"AddMenuItem","returnType":"int","paramData":["string","caption","string","command","id","symbol","int","count","any","parameter","string","info_caption","int","extra","any","XPar1","any","XPar2"],"params":9,"optional":true,"desc":"Adds a menu entry."},"AddMsgBoardCmd":{"title":"AddMsgBoardCmd","returnType":"int","paramData":["string","command","string","script"],"params":2,"optional":true,"desc":"Creates a user-defined messageboard command. This command can be entered by any player using the syntax \"/[command]\" in the message board. This will execute the defined script. The script can use \"%s\" to incorporate parameters."},"AddVertex":{"title":"AddVertex","returnType":"int","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Adds a new vertex to an object."},"Angle":{"title":"Angle","returnType":"int","paramData":["int","x1","int","y1","int","x2","int","y2","int","precision"],"params":5,"optional":true,"desc":"Returns the view angle from the first point to the second in degrees. 0Â° ist straight up. All coordinates global."},"Anim_AbsX":{"title":"Anim_AbsX","returnType":"array","paramData":["int","position","int","begin","int","end","int","length"],"params":4,"optional":true,"desc":"The value depends on the movement of the object into X direction. Every pixel the object moves into X direction increases the value a little bit. Once end has been reached the value is reset to begin. In contrast to Anim_X the value moves towards end not depending on whether the object moves to the left or to the right."},"Anim_AbsY":{"title":"Anim_AbsY","returnType":"array","paramData":["int","position","int","begin","int","end","int","length"],"params":4,"optional":true,"desc":"The value depends on the movement of the object into Y direction. Every pixel the object moves into Y direction increases the value a little bit. Once end is reached the value is reset to begin. In contrast to Anim_Y the value always moves towards end, not depending on whether the object moves upwards or downwards."},"Anim_Action":{"title":"Anim_Action","returnType":"array","paramData":[],"params":0,"desc":"The value depends on the phase of the current action. The phase is mapped linearily to the length of the animation the current action is playing. This can be used to play animations synchronized to the ActMap animation."},"Anim_Const":{"title":"Anim_Const","returnType":"array","paramData":["int","value"],"params":1,"optional":true,"desc":"Value provider for PlayAnimation, SetAnimationPosition or SetAnimationWeight: For the whole animation the given constant value will be used."},"Anim_Linear":{"title":"Anim_Linear","returnType":"array","paramData":["int","position","int","begin","int","end","int","length","int","on_ending"],"params":5,"optional":true,"desc":"The value increases or decreases (depending on whether end is smaller or larger than begin) linearily in time (in frames). Initially the value is set to position and it is moving towards end. One cycle from begin to end lasts for length frames. If position and begin are not the same then end will be reached earlier already. on_ending specifies what happens once the end is reached."},"Anim_R":{"title":"Anim_R","returnType":"array","paramData":["int","begin","int","end"],"params":2,"optional":true,"desc":"The value depends on the rotation of the object. Upward rotation (0 degrees) is mapped to the value given by begin, and moves toward end when the object rotates clockwise, up to end after one revolution (360 degrees)."},"Anim_X":{"title":"Anim_X","returnType":"array","paramData":["int","position","int","begin","int","end","int","length"],"params":4,"optional":true,"desc":"The value depends on the movement into X direction. Every pixel moved into positive X direction increases the value a little bit, and each pixel moved into negative X direction decreases it. If end was reached then the value is reset to begin and if begin was reached then the value is reset to end."},"Anim_XDir":{"title":"Anim_XDir","returnType":"array","paramData":["int","begin","int","end","int","max_dir"],"params":3,"optional":true,"desc":"The value is proportional to the object's velocity in X direction. The velocities from 0 to max_dir are mapped linearily to the interval from begin to end."},"Anim_Y":{"title":"Anim_Y","returnType":"array","paramData":["int","position","int","begin","int","end","int","length"],"params":4,"optional":true,"desc":"The value depends on the movement of the object in Y direction. Each pixel the object moves into positive Y direction increases the value a little bit, and each pixel in negative Y direction decreases it. If end is reached then the value is reset to begin, and if begin is reached then the value is reset to end."},"Anim_YDir":{"title":"Anim_YDir","returnType":"array","paramData":["int","begin","int","end","int","max_dir"],"params":3,"optional":true,"desc":"The value is proportional to the object's velocity in Y direction. The velocities 0 to max_dir are mapped linearly to the interval given by begin and end."},"AppendCommand":{"title":"AppendCommand","returnType":"bool","paramData":["string","command","object","target","int","x","int","y","object","target2","int","delay","any","Data","int","retries","int","base_mode"],"params":9,"optional":true,"desc":"Appends a command to the command stack of an object. The appended command will be executed after the current other commands.For command descriptions see SetCommandNotice: commands set by AppendCommand are not transferred to controlled vehicles (see VehicleControl)."},"ArcCos":{"title":"ArcCos","returnType":"int","paramData":["int","value","int","radius"],"params":2,"optional":true,"desc":"Calculates arc cosine of value/radius, or x = arccos(value/radius). This corresponds to cos(x) = value/radius. This function is used to calculate an angle from horizontal and vertical offsets. However, in most cases Angle() does what you need."},"ArcSin":{"title":"ArcSin","returnType":"int","paramData":["int","value","int","radius"],"params":2,"optional":true,"desc":"Calculates arc sine of value/radius, or x = arcsin(value/radius). This corresponds to sin(x) = value/radius. This function is used to calculate an angle from horizontal and vertical offsets. However, in most cases Angle() does what you need."},"AttachMesh":{"title":"AttachMesh","returnType":"int","paramData":["any","mesh","string","parent_bone","string","child_bone","array","transformation","int","flags"],"params":5,"optional":true,"desc":"Attaches a mesh to another mesh. If mesh is an ID then the mesh of the corresponding definition is used. If mesh is an object then the current mesh of that object is used, including all its animations and attached meshes. However, in that case only the graphics will be attached - the object itself stays at its current position. The return value is a number that can be used to detach the mesh again via DetachMesh."},"BlastFree":{"title":"BlastFree","returnType":"int","paramData":["int","x","int","y","int","radius","int","caused_by","int","max_density"],"params":5,"optional":true,"desc":"Blasts a hole in solid materials. "},"BlastObjects":{"title":"BlastObjects","returnType":"int","paramData":["int","x","int","y","int","level","object","container","int","caused_by"],"params":5,"optional":true,"desc":"Applies explosion damage to all objects at the specified position. x and y are always global coordinates. If a container is specified, damage is only applied to objects contained in that container. Explosion damage can cause incineration or fling away living objects."},"BoundBy":{"title":"BoundBy","returnType":"int","paramData":["int","value","int","lower_bound","int","upper_bound"],"params":3,"optional":true,"desc":"Returns value if it is within the given boundaries (value >= lower_bound and value <= upper_bound). Otherwise returns the applicable limit."},"Bubble":{"title":"Bubble","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Creates a bubble."},"Buy":{"title":"Buy","returnType":"object","paramData":["id","buy_object","int","for_player","int","pay_player","object","to_base","bool","show_errors"],"params":5,"optional":true,"desc":"Buys an object for for_plr, deducting the wealth of pay_player. The function will fail if the paying player does not have enough money or the object is currently not available in the home base material."},"C4D_All":{},"C4D_Background":{},"C4D_Goal":{},"C4D_Living":{},"C4D_Object":{},"C4D_Parallax":{},"C4D_Rule":{},"C4D_StaticBack":{},"C4D_Structure":{},"C4D_Vehicle":{},"C4V_Array":{},"C4V_Bool":{},"C4V_C4Object":{},"C4V_Int":{},"C4V_Nil":{},"C4V_PropList":{},"C4V_String":{},"Call":{"title":"Call","returnType":"any","paramData":["string or function","function","any","..."],"params":2,"optional":true,"desc":"Calls the specified function. If given a string, the function is looked up in the context object (this). For example, obj->Call(\"Foo\") is the same as obj->Foo(). Using Call like this is primarily useful when the name of the function can vary. If \"~\" is prepended to the function name then the call does not fail if the function does not exist."},"CanConcatPictureWith":{"title":"CanConcatPictureWith","returnType":"bool","paramData":["object","other"],"params":1,"optional":true,"desc":"Checks whether the pictures of two objects are the same and therefore can be stacked in contents menus."},"CanInsertMaterial":{"title":"CanInsertMaterial","returnType":"bool","paramData":["int","material_index","int","x","int","y","proplist","out_insertpos"],"params":4,"optional":true,"desc":"Tests if a material pixel at the given position can be inserted."},"CastObjects":{"title":"CastObjects","returnType":"int","paramData":["id ","id","int ","number","int ","level","int ","x","int ","y","int ","angle","int ","angle_variance"],"params":7,"optional":true,"desc":"Casts number objects at the specified position with speed level. For local calls the created objects will have the same owner as the calling object."},"CastPXS":{"title":"CastPXS","returnType":"int","paramData":["string","material_name","int","amount","int","level","int","x","int","y","int ","angle","int ","angle_variance"],"params":7,"optional":true,"desc":"Casts material pixels at the specified position. In local calls, the coordinates are an offset to the position of the calling object."},"ChangeDef":{"title":"ChangeDef","returnType":"bool","paramData":["id","new_def"],"params":1,"optional":true,"desc":"Assigns a new definition to an object."},"CheckConstructionSite":{"title":"CheckConstructionSite","returnType":"bool","paramData":["id","object_id","int","xoffset","int","yoffset"],"params":3,"optional":true,"desc":"Checks whether the given location is suitable for the construction of object_id. The same check is used before creation in CreateConstruction if check_side is true. In local calls the specified position will be an offset to the position of the calling object."},"CheckEffect":{"title":"CheckEffect","returnType":"int","paramData":["string","name","object","target","int","priority","int","timer","any","var1","any","var2","any","var3","any","var4"],"params":8,"optional":true,"desc":"Makes Fx*Effect (and in cases Fx*Add) callbacks to the specified list of effects, without actually creating any effect. The return value is -1 if another effect has rejected the call. If an effect accepts the call, the return value is the effect number of that effect."},"CheckVisibility":{"title":"CheckVisibility","returnType":"bool","paramData":["int","player"],"params":1,"optional":true,"desc":"Checks whether this object is visible for the given player."},"ClearFreeRect":{"title":"ClearFreeRect","returnType":"void","paramData":["int","x","int","y","int","width","int","height"],"params":4,"optional":true,"desc":"Removes all material within the specified rectangle. Coordinates are always global. Excluding the right and lower limits of the rectangle."},"ClearMenuItems":{"title":"ClearMenuItems","returnType":"int","paramData":[],"params":0,"desc":"Removes all entries from a menu."},"ClearParticles":{"title":"ClearParticles","returnType":"bool","paramData":[],"params":0,"desc":"Removes all particles associated with the calling object or the global particles if not called from object context."},"ClearScheduleCall":{"title":"ClearScheduleCall","returnType":"bool","paramData":["object","obj","string","function"],"params":2,"optional":true,"desc":"Cancels function calls which has been scheduled by ScheduleCall. All scheduled calls to the specified function will be cancelled."},"CloseMenu":{"title":"CloseMenu","returnType":"bool","paramData":[],"params":0,"desc":"Closes the menu of the calling object."},"Collect":{"title":"Collect","returnType":"bool","paramData":["object","item"],"params":1,"optional":true,"desc":"Collects an object. This function performs the same events as they occur if the object is collected in the game through the Collection area (there will be a RejectCollect call, flag collection checks, hit calls, etc.) The only difference is that there will be no comparison of collection position and the collected item is not checked for the OCF_Carryable flag.Using this function you can for example collect objects directly from a container. If the function fails (e.g. through a RejectCollect or a full target container) the function returns false, otherwise true."},"COMD_Down":{},"COMD_DownLeft":{},"COMD_DownRight":{},"COMD_Left":{},"COMD_None":{},"COMD_Right":{},"COMD_Stop":{},"COMD_Up":{},"COMD_UpLeft":{},"COMD_UpRight":{},"ComponentAll":{"title":"ComponentAll","returnType":"bool","paramData":["id","components"],"params":1,"optional":true,"desc":"Checks whether an object is composed of only one specified component type."},"ComposeContents":{"title":"ComposeContents","returnType":"object","paramData":["id","object_id"],"params":1,"optional":true,"desc":"Creates an object of the specified type in the contents of the calling object. The object is composed from components which must be available inside the object. Otherwise, a message is displayed listing missing components. This function causes the callback BuildNeedsMaterial which can be used to intercept the message and perform custom actions for acquiring the necessary material."},"Construction":{"title":"Construction","returnType":"any","paramData":["object","creator"],"params":1,"optional":true,"desc":"Called at the creation of an object."},"Contained":{"title":"Contained","returnType":"object","paramData":[],"params":0,"desc":"Returns the container object in which this object is contained. Returns nil if this object is not contained."},"Contents":{"title":"Contents","returnType":"object","paramData":["int","index"],"params":1,"optional":true,"desc":"Returns the indicated object contained in the target obj."},"ContentsCount":{"title":"ContentsCount","returnType":"int","paramData":["id","object_id"],"params":1,"optional":true,"desc":"Returns the number of objects of the specified type which are contained in the target object."},"Cos":{"title":"Cos","returnType":"int","paramData":["int","angle","int","radius","int","precision"],"params":3,"optional":true,"desc":"Returns cos(angle) * radius."},"CreateArray":{"title":"CreateArray","returnType":"array","paramData":["int","length"],"params":1,"optional":true,"desc":"Creates a new zero filled array."},"CreateConstruction":{"title":"CreateConstruction","returnType":"object","paramData":["id","object_id","int","xoffset","int","yoffset","int","owner","int","completion","bool","adjust_terrain","bool","check_site"],"params":7,"optional":true,"desc":"Should be used instead of CreateObject to create a building or construction site. In local calls the specified position will be an offset to the position of the calling object. If check_site is 1, the site is checked for suitability before creating the object. If the site is not suitable (e.g. rough ground or not enough space), a message is displayed above the calling object and the function returns nil."},"CreateContents":{"title":"CreateContents","returnType":"object","paramData":["id","id","int","count"],"params":2,"optional":true,"desc":"Creates an object of the specified type in the contents of another object."},"CreateMenu":{"title":"CreateMenu","returnType":"bool","paramData":["id","symbol","object","command_object","int","extra","string","caption","int","extra_data","int","style","bool","permanent","id","menu_id"],"params":8,"optional":true,"desc":"Creates a user defined menu for the specified object. Menu entries are to be added using AddMenuItem."},"CreateObject":{"title":"CreateObject","returnType":"object","paramData":["id","id","int","xoffset","int","yoffset","int","owner"],"params":4,"optional":true,"desc":"Creates an object of the specified type at the specified position. The position will be the bottom center of the new object. xoffset and yoffset are relative to the calling object in local calls, otherwiese global."},"CreateParticle":{"title":"CreateParticle","returnType":"bool","paramData":["string","particle_name","int","x","int","y","int","speed_x","int","speed_y","int","lifetime","proplist","properties","int","amount"],"params":8,"optional":true,"desc":"Creates a new particle with the given properties. Note that particle creation is not necessarily synchronized over the network and thus, the return value is not whether the particle was actually created but whether the particle definition was found."},"CreateParticleAtBone":{"title":"CreateParticleAtBone","returnType":"bool","paramData":["string","szName","string","szBoneName","array","pos","array","dir","int","lifetime","proplist","properties","int","amount"],"params":7,"optional":true,"desc":"Creates a particle relative to a bone of the calling object's skeleton. The named particle definition must be loaded. For more information see the particle documentation."},"CreateScriptPlayer":{"title":"CreateScriptPlayer","returnType":"bool","paramData":["string","name","int","color","int","team","int","flags","id","extra_data"],"params":5,"optional":true,"desc":"Initializes a joining script player. Script players appear as regular players from the scripting point of view. They have a crew, wealth, build knowledge, home base material, hostility, teams, etc. However, script players do not have a game view port and they can not be controlled by human users.Script players can be used to create AI controlled opponent teams in special scenarios."},"CustomMessage":{"title":"CustomMessage","returnType":"bool","paramData":["string","message","object","obj","int","plr","int","offset_x","int","offset_y","int","color","id","deco","proplist","portrait","int","flags"],"params":9,"optional":true,"desc":"Displays a message."},"DeathAnnounce":{"title":"DeathAnnounce","returnType":"void","paramData":[],"params":0,"desc":"Displays a death message above the calling object."},"DeepEqual":{"title":"DeepEqual","returnType":"bool","paramData":["any","value1","any","value2"],"params":2,"optional":true,"desc":"Compares two values. Unlike the ==-operator, DeepEqual compares the elements of proplists and arrays if two non-equal proplists are passed."},"Definition":{"title":"Definition","returnType":"any","paramData":["proplist","def"],"params":1,"optional":true,"desc":"Called after loading of the calling definition. This should only change the definition."},"DetachMesh":{"title":"DetachMesh","returnType":"bool","paramData":["int","attach_number"],"params":1,"optional":true,"desc":"If a mesh was previously attached to another one via AttachMesh then it can be detached again using this function."},"DigFree":{"title":"DigFree","returnType":"int","paramData":["int","x","int","y","int","radius","bool","no_dig2objects","bool","no_instability_check"],"params":5,"optional":true,"desc":"Makes a circular hole in semi-solid materials. The return value is the amount of pixels that were dug free. If no_dig2objects is true, the dug out material does neither create objects according to the Dig2Objects in the *.ocm nor will the amount be stored in the internal buffer."},"DigFreeRect":{"title":"DigFreeRect","returnType":"int","paramData":["int","x","int","y","int","width","int","height","bool","no_dig2objects","bool","no_instability_check"],"params":6,"optional":true,"desc":"Makes a rectangular hole in semi-solid materials. The return value is the amount of pixels that were dug free. If no_dig2objects is true, the dug out material does neither create objects according to the Dig2Objects in the *.ocm nor will the amount be stored in the internal buffer."},"DIR_Left":{},"DIR_Right":{},"Distance":{"title":"Distance","returnType":"int","paramData":["int","x1","int","y1","int","x2","int","y2"],"params":4,"optional":true,"desc":"Calculates the distance between two points. Same as Sqrt((x2-x1)^2 + (y2-y1)^2;)."},"DoBaseMaterial":{"title":"DoBaseMaterial","returnType":"bool","paramData":["int","player","id","definition","int","change"],"params":3,"optional":true,"desc":"Changes availability of buyable objects at the home base."},"DoBaseProduction":{"title":"DoBaseProduction","returnType":"bool","paramData":["int","player","id","type","int","change"],"params":3,"optional":true,"desc":"Changes resupply speed of buyable objects at the home base."},"DoBreath":{"title":"DoBreath","returnType":"bool","paramData":["int","change"],"params":1,"optional":true,"desc":"Changes the breath value of an object."},"DoCon":{"title":"DoCon","returnType":"void","paramData":["int","change"],"params":1,"optional":true,"desc":"Adjusts the completion value of an object. This affects the completion of construction sites or the growth of trees and living beings. If completion drops below 0, the object is removed."},"DoCrewExp":{"title":"DoCrewExp","returnType":"void","paramData":["int","change"],"params":1,"optional":true,"desc":"Gives experience points to a clonk."},"DoDamage":{"title":"DoDamage","returnType":"void","paramData":["int","change","int","damage_type","int","caused_by"],"params":3,"optional":true,"desc":"Adjusts the damage value of an object. If a change is made, the callback 'Damage' is made in the target object."},"DoEnergy":{"title":"DoEnergy","returnType":"void","paramData":["int","change","bool","exact","int","damage_type","int","caused_by"],"params":4,"optional":true,"desc":"Adjusts the energy value of an object. Energy signifies life energy in living beings."},"DoPlayerScore":{"title":"DoPlayerScore","returnType":"bool","paramData":["int","player","int","change"],"params":2,"optional":true,"desc":"Changes the player score of a player."},"DoRGBaValue":{"title":"DoRGBaValue","returnType":"int","paramData":["int","Val","int","change","int","select"],"params":3,"optional":true,"desc":"\n      Adds a specified color value to a 32 bit color value. \n      \n        \n          select\n          Selection\n        \n        \n          0\n          Alpha value\n        \n        \n          1\n          Red value\n        \n        \n          2\n          Green value\n        \n        \n          3\n          Blue value\n        \n      \n\n    "},"DoScoreboardShow":{"title":"DoScoreboardShow","returnType":"bool","paramData":["int","change","int","for_player"],"params":2,"optional":true,"desc":"Sets the visibility counter of the scoreboard. This internal counter starts at 0. If the counter value is greater than 0, the scoreboard is visible. If it is less than 0, it is removed. If it is equal to 0, the scoreboard is visible when the player presses the corresponding keyboard key (usually Tab)."},"DoWealth":{"title":"DoWealth","returnType":"bool","paramData":["int","player","int","value"],"params":2,"optional":true,"desc":"Changes the wealth value of a player."},"DrawDefMap":{"title":"DrawDefMap","returnType":"bool","paramData":["int","x","int","y","int","width","int","height","string","map_name"],"params":5,"optional":true,"desc":"Draws a dynamic map within the specified rectangle over the old landscape using a given map specification from Landscape.txt."},"DrawMap":{"title":"DrawMap","returnType":"bool","paramData":["int","x","int","y","int","width","int","height","string","map"],"params":5,"optional":true,"desc":"Draws a dynamic map within the specified rectangle over the old landscape. This is done using the same evaluation as with Landscape.txt components."},"DrawMaterialQuad":{"title":"DrawMaterialQuad","returnType":"bool","paramData":["string","szMaterialTexture","int","x1","int","y1","int","x2","int","y2","int","x3","int","y3","int","x4","int","y4","bool","sub"],"params":10,"optional":true,"desc":"Draws a four-cornered polygon of the specified material and texture into the landscape."},"DrawParticleLine":{"title":"DrawParticleLine","returnType":"int","paramData":["string","particle","int","x0","int","y0","int","x1","int","y1","int","prtdist","int","a","int","b0","int","b1","int","ydir"],"params":10,"optional":true,"desc":"Creates a line of particles between two points. Returns the number of particles created."},"EditCursor":{"title":"EditCursor","returnType":"object","paramData":[],"params":0,"desc":"In the developer mode of the engine this function returns the object which is currently under the mouse cursor (in edit mode: select and move)."},"EffectCall":{"title":"EffectCall","returnType":"any","paramData":["object","target","proplist","effect","string","command","any","..."],"params":4,"optional":true,"desc":"Makes a function call in the specified effect. The call is made within the context of the effect. The first two parameters are always the target object and the effect. The remaining parameters can be freely chosen."},"EliminatePlayer":{"title":"EliminatePlayer","returnType":"bool","paramData":["int","player"],"params":1,"optional":true,"desc":"Eliminates a player. The round counts as 'lost' for all eliminated players."},"Enter":{"title":"Enter","returnType":"bool","paramData":["object","target"],"params":1,"optional":true,"desc":"Moves an object into the contents of another object. This call invokes no RejectCollect, Collection, or ActivateEntracnce callbacks in the target object. It does, however, cause RejectEntrance and Entrance callbacks in the entering object."},"eval":{"title":"eval","returnType":"any","paramData":["string","script"],"params":1,"optional":true,"desc":"Executes a string as script."},"Exit":{"title":"Exit","returnType":"bool","paramData":["int","x","int","y","int","iR","int","xdir","int","ydir","int","rdir"],"params":6,"optional":true,"desc":"Moves an object from its container. Optionally, sets its exit velocity."},"Explode":{"title":"Explode","returnType":"void","paramData":["int","level","id","effect","string","particle"],"params":3,"optional":true,"desc":"Makes an object explode. The explosion will affect landscape and objects and the object including all of its contents is removed. If the object is contained, the explosion will also damage all other objects in that container. The owner of the exploding object is considered to have caused the explosion."},"Extinguish":{"title":"Extinguish","returnType":"bool","paramData":[],"params":0,"desc":"Extinguishes a burning object."},"ExtractLiquid":{"title":"ExtractLiquid","returnType":"int","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Sucks up one pixel of liquid at the specified position. Return value is the material number of the material actually extracted, or -1 if no liquid was there."},"ExtractMaterialAmount":{"title":"ExtractMaterialAmount","returnType":"int","paramData":["int","x","int","y","int","material_index","int","amount"],"params":4,"optional":true,"desc":"Extracts a certain amount of material at the specified position. The return value is the amount actually extracted."},"FatalError":{"title":"FatalError","returnType":"bool","paramData":["string","message"],"params":1,"optional":true,"desc":"Prints out the specified error message and the call stack, then cancels the execution of the function it was called in. This function can e.g. be used to effectively debug scripts or to throw an error if required parameters of a function are not given by the user of the function. "},"FileWrite":{"title":"FileWrite","returnType":"bool","paramData":["int","fid","string","data"],"params":2,"optional":true,"desc":"Adds a text string to an open file. Currently, this function is only used to write to the Objects.c file in the SaveScenarioObjects callback defined in System.ocg/SaveScenario.c (See Scenario objects saving)."},"FindBase":{"title":"FindBase","returnType":"object","paramData":["int","player","int","index"],"params":2,"optional":true,"desc":"Searches for the home base of a player. The home base is usually the building with the flag."},"FindConstructionSite":{"title":"FindConstructionSite","returnType":"array","paramData":["id","definition","int","x","int","y"],"params":3,"optional":true,"desc":"Searches for a suitable construction site for a building of the specified type, starting at the specified position. If a site is found, the coordinates are returned in the array [x,y]. Otherwise, the function returns nil."},"FindContents":{"title":"FindContents","returnType":"object","paramData":["id","type"],"params":1,"optional":true,"desc":"Returns the first found contained object of the specified type."},"FindObject":{"title":"FindObject","returnType":"object","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Returns an object fulfilling the specified search criteria. Search criteria are composed of special Find_x() values."},"FindObjects":{"title":"FindObjects","returnType":"array","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Creates a list of objects which fulfill the specified search criteria. Search criteria are composed of Find_x() values."},"FindOtherContents":{"title":"FindOtherContents","returnType":"object","paramData":["id","type"],"params":1,"optional":true,"desc":"Returns the first contained object which is not of the specified type."},"Find_Action":{"title":"Find_Action","returnType":"array","paramData":["string","action"],"params":1,"optional":true,"desc":"Search criterion: finds all objects with the specified action."},"Find_ActionTarget":{"title":"Find_ActionTarget","returnType":"array","paramData":["object","action_target"],"params":1,"optional":true,"desc":"Search criterion: finds all objects that have the specified first action target."},"Find_ActionTarget2":{"title":"Find_ActionTarget2","returnType":"array","paramData":["object","action_target"],"params":1,"optional":true,"desc":"Search criterion: finds all objects that have the specified second action target."},"Find_ActionTargets":{"title":"Find_ActionTargets","returnType":"array","paramData":["object","action_target1","object","action_target2"],"params":2,"optional":true,"desc":"Search criterion: finds all objects that have the specified action targets."},"Find_Allied":{"title":"Find_Allied","returnType":"array","paramData":["int","player"],"params":1,"optional":true,"desc":"Search criterion: finds all objects owned by friends of the specified player."},"Find_And":{"title":"Find_And","returnType":"array","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Search criterion: finds all objects fulfilling the specified search criteria."},"Find_AnyContainer":{"title":"Find_AnyContainer","returnType":"array","paramData":[],"params":0,"desc":"Search criterion: finds all objects which are contained."},"Find_AtPoint":{"title":"Find_AtPoint","returnType":"array","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Search criterion: finds all objects which overlap the specified coordinate point."},"Find_Category":{"title":"Find_Category","returnType":"array","paramData":["int","category"],"params":1,"optional":true,"desc":"Search criterion: finds all objects of the specified category."},"Find_Container":{"title":"Find_Container","returnType":"array","paramData":["object","container"],"params":1,"optional":true,"desc":"Search criterion: finds all objects within the specified container."},"Find_Distance":{"title":"Find_Distance","returnType":"array","paramData":["int","radius","int","x","int","y"],"params":3,"optional":true,"desc":"Search criterion: finds all objects within the specified maximum distance from the specified coordinates. If no coordinates are specified, the position of the calling object is used."},"Find_Exclude":{"title":"Find_Exclude","returnType":"array","paramData":["object","exclude"],"params":1,"optional":true,"desc":"Search criterion: the specified object is excluded from the search."},"Find_Func":{"title":"Find_Func","returnType":"array","paramData":["string","function","","..."],"params":2,"optional":true,"desc":"Search criterion: finds all objects which return true to a call of the specified function. If the function is defined locally, the local function will be called, otherwiese a global function."},"Find_Hostile":{"title":"Find_Hostile","returnType":"array","paramData":["int","player"],"params":1,"optional":true,"desc":"Search criterion: finds all objects owned by an enemy of the specified player."},"Find_ID":{"title":"Find_ID","returnType":"array","paramData":["id","definition"],"params":1,"optional":true,"desc":"Search criterion: finds all objects of the specified ID."},"Find_InRect":{"title":"Find_InRect","returnType":"array","paramData":["int","x","int","y","int","width","int","height"],"params":4,"optional":true,"desc":"Search criterion: finds all objects within the specified rectangle."},"Find_NoContainer":{"title":"Find_NoContainer","returnType":"array","paramData":[],"params":0,"desc":"Search criterion: finds all uncontained objects."},"Find_Not":{"title":"Find_Not","returnType":"array","paramData":["array","Criteria"],"params":1,"optional":true,"desc":"Search criterion: finds all objects which do NOT fulfill the specified criterion."},"Find_OCF":{"title":"Find_OCF","returnType":"array","paramData":["int","ocf"],"params":1,"optional":true,"desc":"Search criterion: finds all objects which have the specified Object Character Flag set."},"Find_OnLine":{"title":"Find_OnLine","returnType":"array","paramData":["int","x1","int","y1","int","x2","int","y2"],"params":4,"optional":true,"desc":"Search criterion: finds all objects which overlap a line going from one point to the other."},"Find_Or":{"title":"Find_Or","returnType":"array","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Search criterion: finds all objects fulfilling at least one of the specified search criteria."},"Find_Owner":{"title":"Find_Owner","returnType":"array","paramData":["int","player"],"params":1,"optional":true,"desc":"Search criterion: finds all objects owned by the specified player."},"FinishCommand":{"title":"FinishCommand","returnType":"bool","paramData":["bool","success","int","command_num"],"params":2,"optional":true,"desc":"Ends a command in the command stack of an object. A finished command stays in the stack until it would be time for it to be executed and is removed only then."},"Fling":{"title":"Fling","returnType":"void","paramData":["int","xdir","int","ydir"],"params":2,"optional":true,"desc":"Flings an object into the specified direction. This function is designed for living beings as it will also set the tumbling activity."},"for":{"title":"for","returnType":"void","paramData":[],"params":0,"desc":"See the 'for' loop."},"Format":{"title":"Format","returnType":"string","paramData":["string","text","","..."],"params":2,"optional":true,"desc":"\n      Composes a string of several values. To do this, text is scanned for placeholders starting with '%' which are then replaced by the parameters.The general syntax for these placeholders is:%[length][.precision]typeExcept for type all fields are optional. Type specifies the data type of the parameter to be expected. It can be one of the following values: \n      \n        \n          Type\n          Meaning\n        \n        \n          d\n          Whole number (int)\n        \n        \n          x\n          Whole number (int), hexadecimal representation (0123456789abcdef)\n        \n        \n          X\n          Whole number (int), hexadecimal representation (0123456789ABCDEF)\n        \n        \n          i\n          id (with ids, length and precision parameters do not apply)\n        \n        \n          s\n          String\n        \n        \n          v\n          Any. Primarily useful for debugging.\n        \n      \n Length specifies the minimum number of characters used to display the value. If the value is shorter, the display is padded on the left with space characters, or with zeroes if there is a '0' before the length specification.The meaning of the precision field varies with the data type: for integers (d) it specifies the minimum display length (the number is padded with zeroes at the beginning); however for strings (s) it specifies the maximum number of characters to be displayed.\n    "},"FrameCounter":{"title":"FrameCounter","returnType":"int","paramData":[],"params":0,"desc":"Returns the current frame number. This counter starts at 0 at the beginning of each round and increases by roughly 37 frames per second, depending of the performance of the computer."},"GainMissionAccess":{"title":"GainMissionAccess","returnType":"bool","paramData":["string","password"],"params":1,"optional":true,"desc":"Adds a password to the list of gained mission access passwords. All players on this computer can then start scenarios which require this password (defined in Scenario.txt). In a sequence of mission scenarios each scenario should give access to the next one."},"GameCall":{"title":"GameCall","returnType":"any","paramData":["string","function","any","..."],"params":2,"optional":true,"desc":"Calls function in the scenario script. If the function is not defined in the scenario script, this call returns nil and does not cause an error."},"GameCallEx":{"title":"GameCallEx","returnType":"any","paramData":["string","function","any","..."],"params":2,"optional":true,"desc":"Makes a broadcast call to the scenario script, all goals, rules and environment objects. This is what the engine does when it makes a scenario callback, see scenario script callbacks."},"GameOver":{"title":"GameOver","returnType":"bool","paramData":[],"params":0,"desc":"Ends the round. The game will count as won for all surviving players."},"GBackLiquid":{"title":"GBackLiquid","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Checks whether there is liquid at the specified position in the landscape."},"GBackSemiSolid":{"title":"GBackSemiSolid","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Checks whether there is solid matter or liquid at the specified position in the landscape."},"GBackSky":{"title":"GBackSky","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Checks whether there is sky at the specified position in the landscape."},"GBackSolid":{"title":"GBackSolid","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Checks whether there is solid matter at the specified position in the landscape."},"GetAction":{"title":"GetAction","returnType":"string","paramData":[],"params":0,"desc":"Returns the name of the current activity of an object. If the object is currently not active, the return value is \"Idle\"."},"GetActionTarget":{"title":"GetActionTarget","returnType":"object","paramData":["int","index"],"params":1,"optional":true,"desc":"Returns the current action targets of the calling object."},"GetActMapVal":{"title":"GetActMapVal","returnType":"any","paramData":["string","entry","string","action","id","definition","int","entry_number"],"params":4,"optional":true,"desc":"Gets activity data from the ActMap of an object."},"GetActTime":{"title":"GetActTime","returnType":"int","paramData":[],"params":0,"desc":"Returns the time (in frames) that the object is already executing this same action."},"GetAlive":{"title":"GetAlive","returnType":"bool","paramData":[],"params":0,"desc":"Returns whether the calling object is still alive."},"GetAnimationLength":{"title":"GetAnimationLength","returnType":"int","paramData":["string","animation"],"params":1,"optional":true,"desc":"Returns the length of the animation with the given name, or nil if there is no such animation. Valid positions (for PlayAnimation and SetAnimationPosition) include values between 0 and the animation length. The returned number corresponds to the animation length (as specified in the modelling tool) in milliseconds."},"GetAnimationName":{"title":"GetAnimationName","returnType":"string","paramData":["int","animation_number"],"params":1,"optional":true,"desc":"Returns the name of the animation with the given number. If there is no such animation with the given number or the number refers to a combination node then this function returns nil."},"GetAnimationPosition":{"title":"GetAnimationPosition","returnType":"int","paramData":["int","animation_number"],"params":1,"optional":true,"desc":"Returns the position of the animation refered to by the given number. The returned value lies between 0 and GetAnimationLength(GetAnimationName(animation_number)). If there is no such animation with the given number or the number refers to a combination node then this function returns nil."},"GetAnimationWeight":{"title":"GetAnimationWeight","returnType":"int","paramData":["int","animation_number"],"params":1,"optional":true,"desc":"Returns the weight of a combination node. The weight specifies the relative portion the combined animations contribute to the resulting animation. The number is always between 0 (only the first animation contributes) and 1000 (only the second animation contributes). Returns nil if there is no such animation with the calling number or if the number refers to an animation node."},"GetAverageTextureColor":{"title":"GetAverageTextureColor","returnType":"int","paramData":["string","texture_name"],"params":1,"optional":true,"desc":"Returns the average color of the given material texture."},"GetBase":{"title":"GetBase","returnType":"int","paramData":[],"params":0,"desc":"Returns the player whose home base the specified object is. Return value NO_OWNER if the object is not a home base."},"GetBaseMaterial":{"title":"GetBaseMaterial","returnType":"int","paramData":["int","player","id","id","int","index","int","category"],"params":4,"optional":true,"desc":"With id specified, the function returns the number of objects of that type which the player can buy at his home base. In this case index and category are ignored. If id is not specified, the function returns the id of the indicated type of objects of the specified category buyable at the players home base. This will return object types which are generally buyable, even if currently no object of that type is available."},"GetBaseProduction":{"title":"GetBaseProduction","returnType":"int","paramData":["int","player","id","id","int","index","int","category"],"params":4,"optional":true,"desc":"With id specified, the function returns how quickly objects of that type are resupplied to the player's home base. In this case index and category are ignored. If id is not specified, the function returns the id of the indicated type of objects of the specified category in the player's resupply list. This will return all object types from the resupply list, even if they are currently not being resupplied."},"GetBit":{"title":"GetBit","returnType":"bool","paramData":["int","old_value","int","bit_number"],"params":2,"optional":true,"desc":"Returns the value of the bit_number'th bit."},"GetBreath":{"title":"GetBreath","returnType":"int","paramData":[],"params":0,"desc":"Returns the current breath value of an object, this is the number of frames an object can still hold its breath."},"GetCategory":{"title":"GetCategory","returnType":"int","paramData":[],"params":0,"desc":"Determines the category of an object. The category is usually specified in the DefCore but may in some cases haven been changed during the game by SetCategory. The category determines general placement and behaviour of the object. The returned category value can be compared with C4D_x constants using the & operator."},"GetChar":{"title":"GetChar","returnType":"int","paramData":["string","text","int","index"],"params":2,"optional":true,"desc":"Determines the ASCII character code of a character in a string."},"GetClimate":{"title":"GetClimate","returnType":"int","paramData":[],"params":0,"desc":"Returns the current climate. This is the median, constant temperature. Actual temperature is calculated by adding the current season and TemperatureRange."},"GetClrModulation":{"title":"GetClrModulation","returnType":"int","paramData":["int","overlay_id"],"params":1,"optional":true,"desc":"Determines the color modulation of an object. This is a color value which is multiplied (or added, according to BlitMode) with the object graphics. For more information see SetClrModulation()."},"GetColor":{"title":"GetColor","returnType":"int","paramData":[],"params":0,"desc":"Gets the RGB color value of the ColorByOwner areas of an object. These are controlled by SetOwner or SetColor."},"GetComDir":{"title":"GetComDir","returnType":"int","paramData":[],"params":0,"desc":"Returns the current command direction of an object. This indicates the object's current intended heading. The exact evaluation of the command direction depends on the procedure of the current activity."},"GetCommand":{"title":"GetCommand","returnType":"any","paramData":["int","element","int","command_num"],"params":2,"optional":true,"desc":"Returns information on a current command of an object. If the object does not have any commands set, nil is returned for all queries."},"GetComponent":{"title":"GetComponent","returnType":"int / id","paramData":["id","component","int","index","object","obj","id","definition"],"params":4,"optional":true,"desc":"Used to determine object components."},"GetCon":{"title":"GetCon","returnType":"int","paramData":[],"params":0,"desc":"Returns the completion of an object. With buildings this is the completion of the construction site. With animals and plants this is the current growth (see StretchGrowth/OverSize in DefCore)."},"GetContact":{"title":"GetContact","returnType":"int","paramData":["int","index","int","dwCNAT"],"params":2,"optional":true,"desc":"Determines on which side individual or all vertices of an object are touching the landscape. Directions are specified using CNAT values."},"GetController":{"title":"GetController","returnType":"int","paramData":[],"params":0,"desc":"Determines which player is currently controlling an object or has last controlled it. With crew members this is usually the owning player. With vehicles it is the owner of the clonk that has last grabbed or pushed it. Objects that are collected by living things automatically change their owner to the owner of the new container. If an object changes its owner (see SetOwner()), the controller is automatically set to the new owner."},"GetCrew":{"title":"GetCrew","returnType":"object","paramData":["int","player","int","index"],"params":2,"optional":true,"desc":"Returns the indicated crew member of a player. For an invalid index nil is returned."},"GetCrewCount":{"title":"GetCrewCount","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the number of crew members of a player."},"GetCrewEnabled":{"title":"GetCrewEnabled","returnType":"bool","paramData":[],"params":0,"desc":"Determines whether a crew member can currently be selected."},"GetCrewExtraData":{"title":"GetCrewExtraData","returnType":"any","paramData":["string","data_name"],"params":1,"optional":true,"desc":"Retrieves extra data stored in the player file using SetCrewExtraData."},"GetCursor":{"title":"GetCursor","returnType":"object","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the currently controlled Clonk of a player."},"GetDamage":{"title":"GetDamage","returnType":"int","paramData":[],"params":0,"desc":"Determines the damage level of an object."},"GetDefBottom":{"title":"GetDefBottom","returnType":"int","paramData":[],"params":0,"desc":"Determines the lower limit of an object. This corresponds to the bottom vertex on objects that have vertices and y position + DefCore OffsetY + DefCore Height for objects without vertices."},"GetDefCoreVal":{"title":"GetDefCoreVal","returnType":"any","paramData":["string","entry","string","section","int","entry_number"],"params":3,"optional":true,"desc":"Returns the property value of an object definition by its name in the DefCore.txt."},"GetDefinition":{"title":"GetDefinition","returnType":"id","paramData":["int","index"],"params":1,"optional":true,"desc":"Returns the id of the indicated definition from the list of definitions as currently loaded by the engine."},"GetDir":{"title":"GetDir","returnType":"int","paramData":[],"params":0,"desc":"Returns the current direction of an object as DIR_x value."},"GetEffect":{"title":"GetEffect","returnType":"any","paramData":["string","name","object","target","int","index","int","max_priority"],"params":4,"optional":true,"desc":"Retrieves a certain effect. If an effect cannot be found the return value is nil."},"GetEffectCount":{"title":"GetEffectCount","returnType":"int","paramData":["string","mask","object","target","int","max_priority"],"params":3,"optional":true,"desc":"Counts object effects or global effects."},"GetEnergy":{"title":"GetEnergy","returnType":"int","paramData":[],"params":0,"desc":"Returns the current energy value of an object. 100% representing the maximum physical value of 100,000. Also see DefCore section [Physical]."},"GetEntrance":{"title":"GetEntrance","returnType":"bool","paramData":[],"params":0,"desc":"Returns the current entrance status of an object. true if entering the object is currently allowed or false if it is disallowed."},"GetGravity":{"title":"GetGravity","returnType":"int","paramData":[],"params":0,"desc":"Returns the current gravity in 1/100 pixel/tickÂ²."},"GetHiRank":{"title":"GetHiRank","returnType":"object","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the highest ranking active clonk of a player."},"GetID":{"title":"GetID","returnType":"proplist","paramData":[],"params":0,"desc":"Returns the definition of an object. This is most often a def, but can also be a proplist deriving from a def."},"GetIndexOf":{"title":"GetIndexOf","returnType":"int","paramData":["array","array2search","any","needle"],"params":2,"optional":true,"desc":"Finds the first occurrence of a value in an array and returns its zero-based index. If the element is not found, -1 is returned. The usual rules for comparison using the ==-operator apply."},"GetKiller":{"title":"GetKiller","returnType":"int","paramData":[],"params":0,"desc":"Returns the player who has lastly caused energy loss to an object."},"GetLeagueProgressData":{"title":"GetLeagueProgressData","returnType":"string","paramData":["int","player_id"],"params":1,"optional":true,"desc":"Gets the league progress data. See SetLeagueProgressData for more information."},"GetLeagueScore":{"title":"GetLeagueScore","returnType":"int","paramData":["int","player_id"],"params":1,"optional":true,"desc":"Returns the league score of the given player. This function can be used for custom scoring e.g. in competition leagues."},"GetLength":{"title":"GetLength","returnType":"int","paramData":["any","text"],"params":1,"optional":true,"desc":"Returns the length of a string or an array."},"GetMass":{"title":"GetMass","returnType":"int","paramData":[],"params":0,"desc":"Returns the mass of the calling objects (including the mass of all its contents) or the calling definition."},"GetMatAdjust":{"title":"GetMatAdjust","returnType":"int","paramData":[],"params":0,"desc":"Returns the material modulation as set by SetMatAdjust."},"GetMaterial":{"title":"GetMaterial","returnType":"int","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Determines the material type at the specified position in the landscape. Returns a material index which can be used for comparison e.g. with Material. For sky areas the function returns -1."},"GetMaterialCount":{"title":"GetMaterialCount","returnType":"int","paramData":["int","material_index"],"params":1,"optional":true,"desc":"Returns the amount of the specified material found in the landscape."},"GetMaterialVal":{"title":"GetMaterialVal","returnType":"any","paramData":["string","entry","string","section","int","material","int","entry_number"],"params":4,"optional":true,"desc":"Returns the property value of a material definition by its name in the material file."},"GetMenu":{"title":"GetMenu","returnType":"id?","paramData":[],"params":0,"desc":"Returns the id of the menu if the object has an open menu. This is usually the id of the menu symbol (symbol) unless CreateMenu was used to explicitly use a differing menu id in idMenuID."},"GetMenuSelection":{"title":"GetMenuSelection","returnType":"int?","paramData":[],"params":0,"desc":"Determines the currently selected menu entry of the currently open menu of an object, or nil if no menu is open."},"GetMeshMaterial":{"title":"GetMeshMaterial","returnType":"string","paramData":["int","submesh"],"params":1,"optional":true,"desc":"Returns the material currently set for the calling object. May also be called from definition context to return the default material of the graphics of this definition."},"GetMissionAccess":{"title":"GetMissionAccess","returnType":"bool","paramData":["string","mission_access"],"params":1,"optional":true,"desc":"Determines whether the player already has the specified mission access password."},"GetName":{"title":"GetName","returnType":"string","paramData":[],"params":0,"desc":"Returns the name of an object or of an object definition. If the object does not have a name of its own, the definition name is returned anyway."},"GetNeededMatStr":{"title":"GetNeededMatStr","returnType":"string","paramData":[],"params":0,"desc":"Returns the still needed construction materials of an object."},"GetObjectBlitMode":{"title":"GetObjectBlitMode","returnType":"int","paramData":["int","overlay_id"],"params":1,"optional":true,"desc":"Returns the current blit mode of an object."},"GetObjectInfoCoreVal":{"title":"GetObjectInfoCoreVal","returnType":"any","paramData":["string","entry","string","section","int","entry_number"],"params":3,"optional":true,"desc":"The InfoCore contains personal information of one crew member. It is stored in the player in a file with the extension oci. Accordingly, GetObjectInfoCoreVal returns a property of a crew member by its name in the InfoCore."},"GetObjectVal":{"title":"GetObjectVal","returnType":"any","paramData":["string","entry","string","section","int","entry_number"],"params":3,"optional":true,"desc":"Returns the property value of an object by its name in the Objects.txt."},"GetOCF":{"title":"GetOCF","returnType":"int","paramData":[],"params":0,"desc":"Returns the Object Character Flag of an object. This value describes the current state of an object. The return value is a bit mask and can be compared with OCF_x values using &."},"GetOwner":{"title":"GetOwner","returnType":"int","paramData":[],"params":0,"desc":"Determines the owner of the calling object."},"GetPathLength":{"title":"GetPathLength","returnType":"int","paramData":["int","startx","int","starty","int","endx","int","endy"],"params":4,"optional":true,"desc":"Searches for a path from start point to end point using the pathfinding algorithm as used by clonks and returns the length of the found path. Returns nil if no path was found."},"GetPhase":{"title":"GetPhase","returnType":"int","paramData":[],"params":0,"desc":"Returns the animation phase of the calling object."},"GetPhysical":{"title":"GetPhysical","returnType":"int","paramData":["string","physical","int","mode"],"params":2,"optional":true,"desc":"Returns physical properties of the object or the definition in the calling context"},"GetPlayerByIndex":{"title":"GetPlayerByIndex","returnType":"int","paramData":["int","index","int","player_type"],"params":2,"optional":true,"desc":"Returns the indicated player number. This function guarantees that for values from 0 to GetPlayerCount()-1 a valid player number will be returned (notice that there may be \"gaps\" between player numbers in case some players have left the game). This makes it easier to process all players in a loop."},"GetPlayerByName":{"title":"GetPlayerByName","returnType":"int","paramData":["string","player_name"],"params":1,"optional":true,"desc":"Returns the number of the given player or -1 if there is no such player."},"GetPlayerColor":{"title":"GetPlayerColor","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Determines the player color. The player color is used to identify various owned objects such as flags or clonks as well as his text messages."},"GetPlayerControlAssignment":{"title":"GetPlayerControlAssignment","returnType":"string","paramData":["int","player","int","control","bool","human_readable","bool","short_name"],"params":4,"optional":true,"desc":"Returns the name of the key, mouse of joystick button assigned to a control for a player. If the player number is invalid, nil is returned. For unassigned or invalid controls, \"\" is returned."},"GetPlayerCount":{"title":"GetPlayerCount","returnType":"int","paramData":["int","player_type"],"params":1,"optional":true,"desc":"Returns the number of players currently in the game."},"GetPlayerID":{"title":"GetPlayerID","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the player-ID of a joined player. Player-IDs are being counted upwards starting at 1. Other than player numbers, they won't be used again after a player has been eliminated. Each newly joined player has a unique ID."},"GetPlayerInfoCoreVal":{"title":"GetPlayerInfoCoreVal","returnType":"any","paramData":["string","entry","string","section","int","player","int","entry_number"],"params":4,"optional":true,"desc":"Returns the property value of a player by its name in the Player.txt."},"GetPlayerName":{"title":"GetPlayerName","returnType":"string","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the name of a player. If the specified player number is invalid, nil is returned. Thus this function can also be used to determine whether a player of a given number exists."},"GetPlayerScore":{"title":"GetPlayerScore","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns a player's score."},"GetPlayerScoreGain":{"title":"GetPlayerScoreGain","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the gain of player score since the beginning of the round."},"GetPlayerTeam":{"title":"GetPlayerTeam","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the team number of a player. If the player is not in a team, 0 is returned."},"GetPlayerType":{"title":"GetPlayerType","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"\n      Returns the type of a player. Possible values are: \n      \n        \n          Constant\n          Value\n          Description\n        \n        \n          C4PT_User\n          1\n          User-controlled player.\n        \n        \n          C4PT_Script\n          2\n          Script-controlled player; i.e. AI player.\n        \n      \n\n    "},"GetPlayerVal":{"title":"GetPlayerVal","returnType":"any","paramData":["string","entry","string","section","int","player","int","entry_number"],"params":4,"optional":true,"desc":"Retrieves properties of a player by way of the name under which they are stored in the Game.txt component of a savegame."},"GetPlayerZoomLimits":{"title":"GetPlayerZoomLimits","returnType":"proplist","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns currently set zoom limits for a player. The return value is a proplist with the following properties:\n      \n        \n          Property\n          Description\n        \n        \n          MaxWidth\n          Maximum width of landscpe in viewport, i.e. how far the player can view if zoomed out as far as possible. May be zero if MaxHeight is nonzero and zoom limits are determined by maximum view height only.\n        \n        \n          MaxHeight\n          Maximum height of landscpe in viewport. May be zero if MaxWidth is nonzero.\n        \n        \n          MinWidth\n          Minimum width of landscpe in viewport, i.e. how far the player can view if zoomed in as far as possible. May be zero if MinHeight is nonzero and zoom limits are determined by minimunm view height only.\n        \n        \n          MinHeight\n          Minimum height of landscpe in viewport. May be zero if MinWidth is nonzero.\n        \n        \n          MaxValue\n          Maximum zoom if set as a direct pixel-to-landscape correspondance value using SetPlayerZoom function. Zero if a direct zoom value is not specified.\n        \n        \n          MinValue\n          Minimum zoom if set as a direct pixel-to-landscape correspondance value using SetPlayerZoom function. Zero if a direct zoom value is not specified.\n        \n      \n    "},"GetPlrClonkSkin":{"title":"GetPlrClonkSkin","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"Determines the clonk skin ID chosen by the player. The skin is used to alter the look of the clonks in the player's crew."},"GetPlrExtraData":{"title":"GetPlrExtraData","returnType":"any","paramData":["int","player","string","data_name"],"params":2,"optional":true,"desc":"This commands retrieves extra data stored in the player file by SetPlrExtraData."},"GetPlrKnowledge":{"title":"GetPlrKnowledge","returnType":"int","paramData":["int","player","id","type","int","index","int","category"],"params":4,"optional":true,"desc":"With type specified the function returns true if the player has the construction plan of the specified object. In this case index and category are ignored. Otherwise, the function returns the indicated construction plan of the specified category."},"GetPlrMagic":{"title":"GetPlrMagic","returnType":"bool / id","paramData":["int","player","id","id","int","index"],"params":3,"optional":true,"desc":"Determines magic spell knowledge of a player."},"GetPlrView":{"title":"GetPlrView","returnType":"object","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the object which is followed by a player's view. If the player view does not currently follow an object, the function returns nil (also see GetPlrViewMode)."},"GetPlrViewMode":{"title":"GetPlrViewMode","returnType":"int","paramData":["int","player"],"params":1,"optional":true,"desc":"\n      Determines the current view mode of a player. The function returns the following values: \n      \n        0: Cursor - The player view follows the currently selected clonk (see GetCursor).\n        1: Target - The player view follows the object set by SetPlrView. Also see GetPlrView.\n        2: Scroll - The player is scrolling his view using the mouse.\n      \n\n    "},"GetProcedure":{"title":"GetProcedure","returnType":"string","paramData":[],"params":0,"desc":"Returns the procedure of the current activity of an object (e.g. FLOAT, ATTACH, WALK). If the procedure is NONE or the object has no activity set the return value is nil."},"GetProperties":{"title":"GetProperties","returnType":"array","paramData":["proplist","object"],"params":1,"optional":true,"desc":"Returns the names of all properties of object."},"GetProperty":{"title":"GetProperty","returnType":"any","paramData":["string","key","proplist","object"],"params":2,"optional":true,"desc":"Returns the property key of object."},"GetR":{"title":"GetR","returnType":"int","paramData":[],"params":0,"desc":"Returns the rotation of an object. Values range from -180Â° to +180Â°. 0Â° is unrotated."},"GetRank":{"title":"GetRank","returnType":"int","paramData":[],"params":0,"desc":"Returns the rank of the specified object. 0 is a freshly recruited clonk."},"GetRDir":{"title":"GetRDir","returnType":"int","paramData":["int","precision"],"params":1,"optional":true,"desc":"Returns the rotation speed of an object."},"GetRGBaValue":{"title":"GetRGBaValue","returnType":"int","paramData":["int","Val","int","select"],"params":2,"optional":true,"desc":"\n      Returns one of the three color fractions of the specified 32 bit color value: \n      \n        \n          select\n          Return value\n        \n        \n          0\n          Alpha value\n        \n        \n          1\n          Red value\n        \n        \n          2\n          Green value\n        \n        \n          3\n          Blue value\n        \n      \n\n    "},"GetRootAnimation":{"title":"GetRootAnimation","returnType":"int","paramData":["int","slot"],"params":1,"optional":true,"desc":"Returns the number of the animation at the top of the given slot. This animation is combined with the animation of the next smaller slot number and the result of this combination will be combined with the animation at the top of the slot with the next higher slot number, or, if there is no such slot, be the final output displayed on the screen. If the slot contains more than one animation then the animation at the top is always a combination node which combines multiple animations or other combinations of animations to the result of the slot. Returns nil if there are no animations in the given slot."},"GetScenarioVal":{"title":"GetScenarioVal","returnType":"any","paramData":["string","entry","string","section","int","entry_number"],"params":3,"optional":true,"desc":"Returns the property value of the scenario by its name and section in the Scenario.txt."},"GetSeason":{"title":"GetSeason","returnType":"int","paramData":[],"params":0,"desc":"Returns the current season. From 0 = winter through 50 = summer to 99 = again winter."},"GetSkyAdjust":{"title":"GetSkyAdjust","returnType":"int","paramData":["bool","back_color"],"params":1,"optional":true,"desc":"Returns the sky modulation as set by SetSkyAdjust. For more information see SetSkyAdjust."},"GetStartupPlayerCount":{"title":"GetStartupPlayerCount","returnType":"int","paramData":[],"params":0,"desc":"Returns the number of players scheduled to join the game when it intiially started. This value is determined before game start, so it can be used in early scenario initialization functions such as Initialize or InitializeMap."},"GetTaggedPlayerName":{"title":"GetTaggedPlayerName","returnType":"string","paramData":["int","player"],"params":1,"optional":true,"desc":"Returns the name of a player, including color markup using the player color. If the specified player number is invalid, nil is returned. Thus this function can also be used to determine whether a player of a given number exists."},"GetTeamByIndex":{"title":"GetTeamByIndex","returnType":"int","paramData":["int","index"],"params":1,"optional":true,"desc":"Returns the indicated team number. This function guarantees that for values from 0 to GetTeamCount()-1 a valid team number will be returned (notice that there may be \"gaps\" between team numbers in case some team have been removed from the game). This makes it easier to process all teams in a loop."},"GetTeamColor":{"title":"GetTeamColor","returnType":"int","paramData":["int","team"],"params":1,"optional":true,"desc":"Returns the color of a team."},"GetTeamCount":{"title":"GetTeamCount","returnType":"int","paramData":[],"params":0,"desc":"Returns the number of teams currently in the game."},"GetTeamName":{"title":"GetTeamName","returnType":"string","paramData":["int","team"],"params":1,"optional":true,"desc":"Returns the name of a team."},"GetTemperature":{"title":"GetTemperature","returnType":"int","paramData":[],"params":0,"desc":"Returns the global temperature. Values depend on climate and season and range from -80 to +80."},"GetTexture":{"title":"GetTexture","returnType":"string","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Returns the name of the texture used for the material at the given position."},"GetTime":{"title":"GetTime","returnType":"int","paramData":[],"params":0,"desc":"Returns the time passed since operating system start. Can be used for exact time measurement."},"GetType":{"title":"GetType","returnType":"int","paramData":["any","Value"],"params":1,"optional":true,"desc":"Returns the data type of a passed value."},"GetUnusedOverlayID":{"title":"GetUnusedOverlayID","returnType":"int","paramData":["int","base_index"],"params":1,"optional":true,"desc":"Returns an unused overlay ID. The first unused overlay ID following base_index will be returned."},"GetValue":{"title":"GetValue","returnType":"int","paramData":["object","base","int","for_player"],"params":2,"optional":true,"desc":"Determines the value of an object. If called as a definition call (e.g. Rock->GetValue();), the standard value of the original object definition is returned, otherwise the current value of the calling object.An object's value is determined as follows: with base specified it is first checked whether the CalcValue function is defined in the object's script and if so, it is evaluated. Otherwise, the definition value is used (see below). The resulting value is then reduced according to the object's completion.Dead animals or clonks always have value 0.The definition value is determined as follows: if the function CalcDefValue is defined in the definition script, it is evaluated. Otherwise, the value overload from Scenario.txt is used, if present. Otherwise, the standard value from DefCore is used."},"GetVertex":{"title":"GetVertex","returnType":"int","paramData":["int","index","int","data"],"params":2,"optional":true,"desc":"Returns a coordinate of the specified vertex (see DefCore.txt). Coordinates are relative to the object center."},"GetVertexNum":{"title":"GetVertexNum","returnType":"int","paramData":[],"params":0,"desc":"Returns the number of vertices of an object."},"GetWealth":{"title":"GetWealth","returnType":"int","paramData":["int","owner"],"params":1,"optional":true,"desc":"Returns the wealth of a player."},"GetWind":{"title":"GetWind","returnType":"int","paramData":["int","x","int","y","bool","global"],"params":3,"optional":true,"desc":"Returns the wind's strength and direction at the specified position. In local calls, the position is an offset to the object position. If global is true, the global wind value is returned."},"GetX":{"title":"GetX","returnType":"int","paramData":[],"params":0,"desc":"Returns the x position of the calling object."},"GetXDir":{"title":"GetXDir","returnType":"int","paramData":["int","precision"],"params":1,"optional":true,"desc":"Returns the horizontal speed of the calling object."},"GetY":{"title":"GetY","returnType":"int","paramData":[],"params":0,"desc":"Returns the y position of the calling object."},"GetYDir":{"title":"GetYDir","returnType":"int","paramData":["int","precision"],"params":1,"optional":true,"desc":"Returns the vertical speed of the calling object."},"GrabContents":{"title":"GrabContents","returnType":"bool","paramData":["object","obj"],"params":1,"optional":true,"desc":"Removes all contents from obj and gives it to the calling object."},"GrabObjectInfo":{"title":"GrabObjectInfo","returnType":"bool","paramData":["object","from"],"params":1,"optional":true,"desc":"Transfers the info section from one object to another. The info section contains name, rank, permanent physicals, etc. Using this command you can e.g. perform reincarnations by transferring the info section from a dead clonk to a live one."},"Hostile":{"title":"Hostile","returnType":"bool","paramData":["int","player1","int","player2","bool","check_one_way"],"params":3,"optional":true,"desc":"Determines whether two players are enemies. Two players will be opposed if at least one of them has declared hostility towards the other."},"HSL":{"title":"HSL","returnType":"int","paramData":["int","byH","int","byS","int","byL"],"params":3,"optional":true,"desc":"Creates a 32 bit color value from three parameters. Range is 0-255 for all parameters."},"HSL2RGB":{"title":"HSL2RGB","returnType":"int","paramData":["int","Val"],"params":1,"optional":true,"desc":"Converts a 24 bit HSL value into the better known 32 bit RGB format.The 24 bit HSL value can be created using RGB(hue, saturation, lightness)."},"HSLa":{"title":"HSLa","returnType":"int","paramData":["int","byH","int","byS","int","byL","int","byA"],"params":4,"optional":true,"desc":"Creates a 32 bit color value from four parameters. Range is 0-255 for all parameters."},"if":{"title":"if","returnType":"void","paramData":["bool","condition"],"params":1,"optional":true,"desc":"If condition is non-zero the directly following command or script block will be executed."},"Incinerate":{"title":"Incinerate","returnType":"bool","paramData":[],"params":0,"desc":"Incinerates the specified object. This may cause an Incineration() call in the object."},"inherited":{"title":"inherited","returnType":"any","paramData":["any","..."],"params":1,"optional":true,"desc":"Calls the overloaded function. A function overloads another function if it is declared with the same name in the same scope."},"InLiquid":{"title":"InLiquid","returnType":"bool","paramData":[],"params":0,"desc":"Returns true, if the object is submerged in liquid."},"InsertMaterial":{"title":"InsertMaterial","returnType":"bool","paramData":["int","material_index","int","x","int","y","int","xdir","int","ydir","proplist","out_insertpos"],"params":6,"optional":true,"desc":"Inserts a material pixel at the given position and given speed."},"Inside":{"title":"Inside","returnType":"bool","paramData":["int","value","int","lower_bound","int","upper_bound"],"params":3,"optional":true,"desc":"Returns true, if value >= lower_bound and val <= upper_bound."},"IsNetwork":{"title":"IsNetwork","returnType":"bool","paramData":[],"params":0,"desc":"Returns whether the current game is a network game."},"Jump":{"title":"Jump","returnType":"bool","paramData":[],"params":0,"desc":"Makes an object jump. The same limitations apply as they would with a keyboard controlled jump: the object can jump only from the WALK activity or SWIM activity (jumping from the latter will cause a dive jump).Returns whether the jump was successfully initiated."},"Kill":{"title":"Kill","returnType":"bool","paramData":["bool","forced"],"params":1,"optional":true,"desc":"Kills an object. Applies to living beings only."},"LandscapeHeight":{"title":"LandscapeHeight","returnType":"int","paramData":[],"params":0,"desc":"Returns the height of the landscape in pixels."},"LandscapeWidth":{"title":"LandscapeWidth","returnType":"int","paramData":[],"params":0,"desc":"Returns the width of the landscape in pixels."},"LaunchEarthquake":{"title":"LaunchEarthquake","returnType":"bool","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Creates an earthquake at the given position. Coordinates are global, even in local calls."},"LaunchLightning":{"title":"LaunchLightning","returnType":"bool","paramData":["int","x","int","y","int","xspeed","int","xrange","int","yspeed","int","yrange","bool","do_gamma"],"params":7,"optional":true,"desc":"Creates a bolt of lightning. This will then move from the starting position (iX, iY) at the specified speed and the specified deviation (iXRange, iYRange). Setting the deviation values to 0 would create a straight, linear bolt.Coordinates are global, even in local calls."},"LaunchVolcano":{"title":"LaunchVolcano","returnType":"bool","paramData":["int","x","int","y","int","strength","string","material_name","int","angle"],"params":5,"optional":true,"desc":"Launches a volcano at the specified position."},"Log":{"title":"Log","returnType":"bool","paramData":["string","message","","..."],"params":2,"optional":true,"desc":"Displays a text in the message board at the bottom of the screen. Parameters can be inserted in C formatting style. See Format."},"LogCallStack":{"title":"LogCallStack","returnType":"bool","paramData":[],"params":0,"desc":"Prints out the current call stack without breaking execution flow."},"MakeCrewMember":{"title":"MakeCrewMember","returnType":"bool","paramData":["int","player"],"params":1,"optional":true,"desc":"Adds an object (usually a clonk) to the crew of a player. The object must have the CrewMember property set in the DefCore.Returns true if the object was added successfully."},"MakeScenarioSaveName":{"title":"MakeScenarioSaveName","returnType":"string","paramData":[],"params":0,"desc":"Returns the name under which an object is stored in an Objects.c file if it is saved with the \"Save scenario\" option (See Scenario objects saving)."},"Material":{"title":"Material","returnType":"int","paramData":["string","material_name"],"params":1,"optional":true,"desc":"Returns the index of a material from its name. This index is used in most functions dealing with materials."},"MaterialName":{"title":"MaterialName","returnType":"string","paramData":["int","material_index"],"params":1,"optional":true,"desc":"Returns the internal (technical) name of a material."},"Max":{"title":"Max","returnType":"int","paramData":["int","value1","int","value2"],"params":2,"optional":true,"desc":"Returns the greater of two values."},"Message":{"title":"Message","returnType":"bool","paramData":["string","message","","..."],"params":2,"optional":true,"desc":"Displays a message. Text can be formatted in C formatting style (see Format)."},"Min":{"title":"Min","returnType":"int","paramData":["int","value1","int","value2"],"params":2,"optional":true,"desc":"Returns the lesser of two values."},"Music":{"title":"Music","returnType":"int","paramData":["string","song_name","bool","loop"],"params":2,"optional":true,"desc":"Plays a music track. The corresponding music file must be available in the active music group. If the loaded scenario contains music files, the scenario file will be the music group. Otherwise, the global file Music.ocg will be used."},"MusicLevel":{"title":"MusicLevel","returnType":"int","paramData":["int","level"],"params":1,"optional":true,"desc":"Sets the volume for playback of background music (see Music)."},"NO_OWNER":{},"Object":{"title":"Object","returnType":"object","paramData":["int","object_number"],"params":1,"optional":true,"desc":"Converts an object number into an object pointer."},"ObjectCount":{"title":"ObjectCount","returnType":"int","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Returns the number of objects fulfilling the specified search criteria. Search criteria are composed of Find_x() function values."},"ObjectDistance":{"title":"ObjectDistance","returnType":"int","paramData":["object","obj2","object","obj"],"params":2,"optional":true,"desc":"Returns the distance between two objects. If obj is nil the distance between the calling object and obj2 is measured."},"ObjectNumber":{"title":"ObjectNumber","returnType":"int","paramData":[],"params":0,"desc":"Returns the object number of an object. This number always uniquely identifies an object, even in subsequent savegame runs. Using Object it can be converted back to an object pointer."},"OCF_Alive":{},"OCF_AttractLightning":{},"OCF_Available":{},"OCF_Chop":{},"OCF_Collectible":{},"OCF_Collection":{},"OCF_Construct":{},"OCF_Container":{},"OCF_CrewMember":{},"OCF_Entrance":{},"OCF_Exclusive":{},"OCF_Fullcon":{},"OCF_Grab":{},"OCF_HitSpeed1":{},"OCF_HitSpeed2":{},"OCF_HitSpeed3":{},"OCF_HitSpeed4":{},"OCF_Inflammable":{},"OCF_InFree":{},"OCF_InLiquid":{},"OCF_InSolid":{},"OCF_Living":{},"OCF_NotContained":{},"OCF_OnFire":{},"OCF_Rotate":{},"OnFire":{"title":"OnFire","returnType":"bool","paramData":[],"params":0,"desc":"Returns whether an object is on fire."},"Par":{"title":"Par","returnType":"any","paramData":["int","index"],"params":1,"optional":true,"desc":"Returns the value of a parameter passed to the function."},"Particles_Colored":{"title":"Particles_Colored","returnType":"proplist","paramData":["proplist","prototype","int","color1","int","color2"],"params":3,"optional":true,"desc":"Creates a colored version of another particle definition."},"PathFree":{"title":"PathFree","returnType":"bool","paramData":["int","x1","int","y1","int","x2","int","y2"],"params":4,"optional":true,"desc":"Determines whether the path from the start point to the end point is free, meaning that no solid material is intersected by a directly line between those points."},"PathFree2":{"title":"PathFree2","returnType":"array","paramData":["int","x1","int","y1","int","x2","int","y2"],"params":4,"optional":true,"desc":"Works like PathFree, but instead returns an array containing the coordinates of the first solid pixel found on line. Returns nil if the path is free."},"PC_Bounce":{"title":"PC_Bounce","returnType":"array","paramData":["int","bouncyness"],"params":1,"optional":true,"desc":"A particle collision function. The particle will bounce off the ground on collision. If your particles get stuck instead of bouncing, you might need to increase the CollisionVertex value a bit."},"PC_Die":{"title":"PC_Die","returnType":"array","paramData":[],"params":0,"desc":"A particle collision function. The particle will die on collision."},"PC_Stop":{"title":"PC_Stop","returnType":"array","paramData":[],"params":0,"desc":"A particle collision function. The particle will set its velocity to zero on collision."},"PlaceAnimal":{"title":"PlaceAnimal","returnType":"object","paramData":["id","animal_id"],"params":1,"optional":true,"desc":"Creates an animal of the specified type in the landscape. The placement position depends on the Placement value in the DefCore of the animal's definition. Returns a pointer to the newly created animal."},"PlaceObjects":{"title":"PlaceObjects","returnType":"int","paramData":["id","definition","int","amount","string","material_name","int","x","int","y","int","width","int","height","bool","on_surface","bool","no_stuck"],"params":9,"optional":true,"desc":"Creates the specified number of objects in the specified target rectangle and target material (optional). Returns the number of iterations or -1 if creation has failed."},"PlaceVegetation":{"title":"PlaceVegetation","returnType":"object","paramData":["id","id","int","x","int","y","int","width","int","height","int","growth"],"params":6,"optional":true,"desc":"Places vegetation in the specified target rectangle. In local calls, the specified coordinates are an offset to the position of the calling object. Returns a pointer to the newly created plant."},"PlayAnimation":{"title":"PlayAnimation","returnType":"int","paramData":["string","animation","int","slot","array","position","array","weight","int","sibling"],"params":5,"optional":true,"desc":"Starts playing a new animation. The return value of this function is the animation number of the animation node inserted which can be used to manipulate or remove the animation later. If there are already animations in the given slot then additionally a combination node is created. This combination node is assigned the returned number plus 1."},"PlayerMessage":{"title":"PlayerMessage","returnType":"bool","paramData":["int","player","string","message","","..."],"params":3,"optional":true,"desc":"Displays a message in the viewport of the specified player. Message formatting is done accoring to Message."},"Punch":{"title":"Punch","returnType":"bool","paramData":["object","obj","int","strength"],"params":2,"optional":true,"desc":"Punches the target object."},"PushParticles":{"title":"PushParticles","returnType":"bool","paramData":["string","name","int","xacc","int","yacc"],"params":3,"optional":true,"desc":"Speeds up all particles of the specified type with a given direction."},"PV_Direction":{"title":"PV_Direction","returnType":"array","paramData":["int","factor"],"params":1,"optional":true,"desc":"The value depends on the current angle of movement of the particle. Usually the factor-parameter can be left out, since the original purpose of this function is to be used for the rotation-property."},"PV_Gravity":{"title":"PV_Gravity","returnType":"array","paramData":["int","factor","int","constant_value"],"params":2,"optional":true,"desc":"The value will depend on the gravity."},"PV_KeyFrames":{"title":"PV_KeyFrames","returnType":"array","paramData":["int","smoothing","int","position1","int","value1","int","position2","int","value2","int","position3","int","value3","int","position4","int","value4"],"params":9,"optional":true,"desc":"The value returned will be an interpolated value of the (smoothed) curve between the up to 4 key frames. PV_KeyFrames(0, 0, X, 1000, Y) is equivalent to PV_Linear(X, Y)."},"PV_Linear":{"title":"PV_Linear","returnType":"array","paramData":["int","start_value","int","end_value"],"params":2,"optional":true,"desc":"The value will go linearly from start_value to end_value over the life of the particle."},"PV_Random":{"title":"PV_Random","returnType":"array","paramData":["int","start_value","int","end_value","int","reroll_interval"],"params":3,"optional":true,"desc":"The value will be a random number in the interval from start_value to (not including) end_value. The values in between are not whole integers, but are also in fraction of integers. This means that PV_Random(0, 1) can not only return one value (the 0) but a lot of different values in the interval between 0 and 1."},"PV_Sin":{"title":"PV_Sin","returnType":"array","paramData":["int","start_value","int","end_value"],"params":2,"optional":true,"desc":"The value will is calculates as sin(value) * amplitude + offset with value given in degrees."},"PV_Speed":{"title":"PV_Speed","returnType":"array","paramData":["int","factor","int","start_value"],"params":2,"optional":true,"desc":"The value will depend on the speed of the particle."},"PV_Step":{"title":"PV_Step","returnType":"array","paramData":["int","step","int","start_value","int","delay","int","maximumValue"],"params":4,"optional":true,"desc":"PV_Step can be used for values that do not depend on the particle age (unlike f.e. PV_Linear)."},"PV_Wind":{"title":"PV_Wind","returnType":"array","paramData":["int","factor","int","constant_value"],"params":2,"optional":true,"desc":"The value will depend on the wind at the current position of the particle."},"Random":{"title":"Random","returnType":"int","paramData":["int","max"],"params":1,"optional":true,"desc":"Yields a random number from 0 to max-1. The returned value cannot be greater than 32767, however."},"RandomX":{"title":"RandomX","returnType":"int","paramData":["int","value1","int","value2"],"params":2,"optional":true,"desc":"Yields a random value from value1 to value2. It does not matter, which limit is greater or less."},"ReloadDef":{"title":"ReloadDef","returnType":"bool","paramData":["id","definition"],"params":1,"optional":true,"desc":"Reloads an object definition. This command can be entered in the console of the developer mode engine after the object definition file has been modified. It will work only if the definition is already loaded."},"ReloadParticle":{"title":"ReloadParticle","returnType":"bool","paramData":["string","particle"],"params":1,"optional":true,"desc":"Reloads a particle definition. This command can be entered in the console of the developer mode engine after the particle definition file has been modified. It will work only if the particle is already loaded."},"RemoveAll":{"title":"RemoveAll","returnType":"int","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Removes all objects which are found using the search criteria."},"RemoveEffect":{"title":"RemoveEffect","returnType":"bool","paramData":["string","name","object","target","proplist","effect","bool","no_calls"],"params":4,"optional":true,"desc":"Deletes an effect."},"RemoveObject":{"title":"RemoveObject","returnType":"void","paramData":["bool","eject_contents"],"params":1,"optional":true,"desc":"Removes the calling object."},"RemoveVertex":{"title":"RemoveVertex","returnType":"int","paramData":["int","index"],"params":1,"optional":true,"desc":"Removes a vertex from the calling object."},"ResetGamma":{"title":"ResetGamma","returnType":"bool","paramData":["int","ramp_index"],"params":1,"optional":true,"desc":"Resets a gamma ramp to default value. This corresponds to SetGamma(RGB(0,0,0), RGB(128,128,128), RGB(255,255,255), ramp_index);. For more information see SetGamma."},"ResetPhysical":{"title":"ResetPhysical","returnType":"bool","paramData":["string","physical"],"params":1,"optional":true,"desc":"Resets all physicals to their default value. For more information see SetPhysical."},"return":{"title":"return","returnType":"void","paramData":["Any","retval"],"params":1,"optional":true,"desc":"Ends the current function and returns a value to the caller."},"RGB":{"title":"RGB","returnType":"int","paramData":["int","byR","int","byG","int","byB"],"params":3,"optional":true,"desc":"Composes a 32 bit color value from the three base colors. Range 0-255 for all parameters."},"RGB2HSL":{"title":"RGB2HSL","returnType":"int","paramData":["int","Val"],"params":1,"optional":true,"desc":"Converts a 32 bit color value into hue, saturation, and lightness values as know in paint programs.The HSL value is returned as int and can be processed using GetRGBaValue or SplitRGBaValue. All values range from 0-255."},"RGBa":{"title":"RGBa","returnType":"int","paramData":["int","byR","int","byG","int","byB","int","byA"],"params":4,"optional":true,"desc":"Composes a 32 bit color value from the three base colors and a transparency value. Range 0-255 for all parameters."},"SaveScenarioObjectAction":{"title":"SaveScenarioObjectAction","returnType":"bool","paramData":["proplist","props"],"params":1,"optional":true,"desc":"Stores object action and phase for Objects.c scenario saving (See Scenario objects saving)."},"Schedule":{"title":"Schedule","returnType":"bool","paramData":["object","obj","string","script","int","delay","int","repeat"],"params":4,"optional":true,"desc":"Executes a specified script command after a specified delay."},"ScheduleCall":{"title":"ScheduleCall","returnType":"bool","paramData":["object","obj","string","function","int","delay","int","repeat","","..."],"params":5,"optional":true,"desc":"Calls a function after a specified delay."},"ScoreboardCol":{"title":"ScoreboardCol","returnType":"int","paramData":["id","definition"],"params":1,"optional":true,"desc":"Converts an object definition id into a number which can be used as index for SetScoreboardData. This function is of interest if an object script intends to access the scoreboard but wants to be sure that it is not using the same column indices as another object definition."},"ScrollContents":{"title":"ScrollContents","returnType":"object","paramData":[],"params":0,"desc":"Shifts the contents of an object. This will always shift by exactly one object (as opposed to ShiftContents). No call to ControlContents is made. Returns a pointer to the object at the front of the contents list after the shift."},"SelectMenuItem":{"title":"SelectMenuItem","returnType":"bool","paramData":["int","number"],"params":1,"optional":true,"desc":"Sets menu selection in an object menu."},"Sell":{"title":"Sell","returnType":"void","paramData":["int","player"],"params":1,"optional":true,"desc":"Sells an object including all its contents."},"SetAction":{"title":"SetAction","returnType":"bool","paramData":["string","action","object","target1","object","target2","bool","force"],"params":4,"optional":true,"desc":"Sets the activity of the calling object. Also see the ActMap."},"SetActionData":{"title":"SetActionData","returnType":"bool","paramData":["any","data"],"params":1,"optional":true,"desc":"Sets the extra data for the current action. The application of the extra data depends on the procedure of the current action. See ActMap procedures."},"SetActionTargets":{"title":"SetActionTargets","returnType":"void","paramData":["object","target1","object","target2"],"params":2,"optional":true,"desc":"Sets the activity targets of an object. The result depends on the procedure of the current action."},"SetAlive":{"title":"SetAlive","returnType":"int","paramData":["bool","alive"],"params":1,"optional":true,"desc":"Sets whether an object is alive."},"SetAnimationBoneTransform":{"title":"SetAnimationBoneTransform","returnType":"int","paramData":["int","animation_number","array","transformation","int","attach_number"],"params":3,"optional":true,"desc":"This function can be used to change the transformation of a bone set with TransformBone. This allows to create dynamic animations by script. Returns true if the new transformation was set or false if there is no such animation node or it was not created with TransformBone."},"SetAnimationPosition":{"title":"SetAnimationPosition","returnType":"bool","paramData":["int","animation_number","array","position","int","attach_number"],"params":3,"optional":true,"desc":"Sets a new position for the given animation. Returns true if the new AVP was set or false if there is no such animation with the given number or the number refers to a combination node."},"SetAnimationWeight":{"title":"SetAnimationWeight","returnType":"bool","paramData":["int","animation_number","array","weight","int","attach_number"],"params":3,"optional":true,"desc":"Sets a new weight for the given animation. Returns true if the new AVP was set or false if there is no such animation with the given number or the refernced node is an animation node."},"SetAttachBones":{"title":"SetAttachBones","returnType":"bool","paramData":["int","attach_number","string","parent_bone","string","child_bone"],"params":3,"optional":true,"desc":"If a mesh was previously attached to another mesh then this function can be used to change one or both of the bones at which they are attached. To only change a single bone the other parameter can be set to nil."},"SetAttachTransform":{"title":"SetAttachTransform","returnType":"bool","paramData":["int","attach_number","array","transformation"],"params":2,"optional":true,"desc":"If a mesh was previously attached to another one via AttachMesh then the transformation of the attached mesh can be changed using this function."},"SetBaseMaterial":{"title":"SetBaseMaterial","returnType":"bool","paramData":["int","player","id","definition","int","cnt"],"params":3,"optional":true,"desc":"Sets the availability of buyable objects at the home base."},"SetBaseProduction":{"title":"SetBaseProduction","returnType":"bool","paramData":["int","player","id","type","int","cnt"],"params":3,"optional":true,"desc":"Sets resupply speed of buyable objects at the home base."},"SetBit":{"title":"SetBit","returnType":"int","paramData":["int","old_value","int","bit_number","bool","bit"],"params":3,"optional":true,"desc":"Returns the new bit mask with the bit at position bit_number replaced by bit."},"SetBridgeActionData":{"title":"SetBridgeActionData","returnType":"bool","paramData":["int","bridge_length","bool","move_clonk","bool","build_wall","int","bridge_material"],"params":4,"optional":true,"desc":"Sets additional parameters for a currently executed BRIDGE procedure of the calling object."},"SetCategory":{"title":"SetCategory","returnType":"void","paramData":["int","category"],"params":1,"optional":true,"desc":"Changes the category of an object."},"SetClimate":{"title":"SetClimate","returnType":"void","paramData":["int","temperature"],"params":1,"optional":true,"desc":"Sets the climate (median temperature)."},"SetClrModulation":{"title":"SetClrModulation","returnType":"bool","paramData":["int","color","int","overlay_id"],"params":2,"optional":true,"desc":"Changes the color modulation of an object. This is a color value which is multiplied with the object color. RGB(255,0,0) will only let the red part of the color show. RGBa(255,255,255,128) will make all color half transparent."},"SetColor":{"title":"SetColor","returnType":"void","paramData":["int","color"],"params":1,"optional":true,"desc":"Sets the ColorByOwner color of an object. This call corresponds to setting the owner using SetOwner to a player with color as the player color."},"SetComDir":{"title":"SetComDir","returnType":"int","paramData":["int","com_dir"],"params":1,"optional":true,"desc":"Sets the command direction of an object (see GetComDir)."},"SetCommand":{"title":"SetCommand","returnType":"bool","paramData":["string","command","object","target","int","x","int","y","object","target2","any","Data","int","retries"],"params":7,"optional":true,"desc":"Gives a command to an object. The object will try to complete the command using the internal artificial intelligence (including pathfinding)."},"SetComponent":{"title":"SetComponent","returnType":"bool","paramData":["id","component","int","count"],"params":2,"optional":true,"desc":"Sets the component count of the calling object."},"SetCon":{"title":"SetCon","returnType":"bool","paramData":["int","con"],"params":1,"optional":true,"desc":"Sets the completion of an object to the specified value."},"SetContactDensity":{"title":"SetContactDensity","returnType":"bool","paramData":["int","density"],"params":1,"optional":true,"desc":"Determines the minimum density of a material to cause an object to collide with the material. By default, objects collide with material that have a density of 50 (solid) or more."},"SetController":{"title":"SetController","returnType":"bool","paramData":["int","player"],"params":1,"optional":true,"desc":"Changes the controller of the calling object."},"SetCrewEnabled":{"title":"SetCrewEnabled","returnType":"void","paramData":["bool","enabled"],"params":1,"optional":true,"desc":"Activates or deactivates crew members. Deactivated crew members can no longer be selected for control by a player. If all of a player's crew members are deactivated the player can not control any clonks but he is still not eliminated. Only valid for true crew member objects. Deactivated crew members are automatically deselected from player control."},"SetCrewExtraData":{"title":"SetCrewExtraData","returnType":"any","paramData":["string","data_name","any","Data"],"params":2,"optional":true,"desc":"With this function additional data can be saved in a crew member's file the in player. This can be used to preserve values across scenarios, for example for RPGs or highscores. If successful, the saved value is returned."},"SetCrewStatus":{"title":"SetCrewStatus","returnType":"bool","paramData":["int","player","bool","into_crew"],"params":2,"optional":true,"desc":"Adds or removes an object (usually a clonk) to or from the crew of a player. The object must have the CrewMember property set in the DefCore.\n    This does not add the object to the permanent crew of the player, use MakeCrewMember for that."},"SetCursor":{"title":"SetCursor","returnType":"bool","paramData":["int","player","object","obj","bool","no_select_arrow"],"params":3,"optional":true,"desc":"Sets the control cursor of a player to the specified object and selects this object for player control. Returns false if the target object is currently deactivated by SetCrewEnabled."},"SetDir":{"title":"SetDir","returnType":"int","paramData":["int","dir"],"params":1,"optional":true,"desc":"Sets the direction of the object. If the object defines an action named \"Turn\", this action is executed after the call of this function."},"SetEntrance":{"title":"SetEntrance","returnType":"void","paramData":["bool","status"],"params":1,"optional":true,"desc":"Enables or disables the possibility to enter or leave this building."},"SetFilmView":{"title":"SetFilmView","returnType":"int","paramData":["int","for_player"],"params":1,"optional":true,"desc":"Sets film playback view to the specified player."},"SetFoW":{"title":"SetFoW","returnType":"void","paramData":["bool","enabled","int","player"],"params":2,"optional":true,"desc":"Switches the fog of war for one player on or off."},"SetGameSpeed":{"title":"SetGameSpeed","returnType":"bool","paramData":["int","game_speed"],"params":1,"optional":true,"desc":"Sets game speed."},"SetGamma":{"title":"SetGamma","returnType":"bool","paramData":["int","color1","int","color2","int","color3","int","ramp_index"],"params":4,"optional":true,"desc":"Sets a gamma ramp. Using gamma ramps, the global light situation of the game can be adjusted by assigning an individual data table to each color channel from which a new brightness value is read. By doing this you can strengthen chosen color ranges, darken or lighten the complete game or even invert light and darkness."},"SetGraphics":{"title":"SetGraphics","returnType":"bool","paramData":["string","gfx_name","id","source_definition","int","overlay","int","overlay_mode","string","action","int","dwBlitMode","object","overlay_object"],"params":7,"optional":true,"desc":"Changes the graphics of the object. This affects the display of the given object everywhere in the game: in the landscape, in menus, or on control buttons."},"SetGravity":{"title":"SetGravity","returnType":"void","paramData":["int","gravity"],"params":1,"optional":true,"desc":"Sets the gravity. It is usually a good idea to set this to a multiple or a fraction of the previous value."},"SetHostility":{"title":"SetHostility","returnType":"bool","paramData":["int","player1","int","player2","bool","hostile","bool","silent","bool","no_calls"],"params":5,"optional":true,"desc":"Sets bilateral friendship of two players."},"SetKiller":{"title":"SetKiller","returnType":"bool","paramData":["int","new_killer"],"params":1,"optional":true,"desc":"Sets the killer of the calling object."},"SetLeaguePerformance":{"title":"SetLeaguePerformance","returnType":"bool","paramData":["int","score","int","player_id"],"params":2,"optional":true,"desc":"Sets the league score. This function can be used for custom scenario scoring in competition or adventure leagues."},"SetLeagueProgressData":{"title":"SetLeagueProgressData","returnType":"bool","paramData":["string","new_data","int","player_id"],"params":2,"optional":true,"desc":"Sets the league progress data. This function can be used to store a per-scenario per-user data string in the league. The function is available for both melee and custom settlement leagues. The data is stored between league games and can later be retrieved using GetLeagueProgressData()."},"SetLength":{"title":"SetLength","returnType":"int","paramData":["array","resize","int","size"],"params":2,"optional":true,"desc":"Changes the length of the array to the specified value. Surplus elements will be deleted, if necessary."},"SetMass":{"title":"SetMass","returnType":"void","paramData":["int","mass"],"params":1,"optional":true,"desc":"Changes the mass of the object. The mass is initialized with DefCore.txt/[DefCore]/Mass. The actual weight is the deadweight plus the weight of the contained objects."},"SetMatAdjust":{"title":"SetMatAdjust","returnType":"bool","paramData":["int","colorMod"],"params":1,"optional":true,"desc":"Sets the material drawing modulation. The material colors will be modulated with the specified color in the same way as ColorByOwner graphics."},"SetMaxPlayer":{"title":"SetMaxPlayer","returnType":"bool","paramData":["int","max"],"params":1,"optional":true,"desc":"Adjusts the maximum number of players that can take part in the current round. Lowering this value will not eliminate active players. This value only affects the limit for joining players."},"SetMenuSize":{"title":"SetMenuSize","returnType":"bool","paramData":["int","coloumns","int","rows"],"params":2,"optional":true,"desc":"Changes the display size of an object menu so the specified number of menu entries will be displayed per line or column."},"SetMeshMaterial":{"title":"SetMeshMaterial","returnType":"bool","paramData":["string","material","int","submesh"],"params":2,"optional":true,"desc":"Changes the material of the calling object's mesh at runtime."},"SetName":{"title":"SetName","returnType":"bool","paramData":["string","name","bool","set_permanent","bool","make_valid_if_exists"],"params":3,"optional":true,"desc":"Changes name of an object or a definition for the duration of the round."},"SetObjDrawTransform":{"title":"SetObjDrawTransform","returnType":"bool","paramData":["int","width","int","xskew","int","xadjust","int","yskew","int","height","int","yadjust","int","overlay_id"],"params":7,"optional":true,"desc":"Transforms the image of the object."},"SetObjectBlitMode":{"title":"SetObjectBlitMode","returnType":"int","paramData":["int","dwNewBlitMod","int","overlay_id"],"params":2,"optional":true,"desc":"Changes the drawing mode of the object. The possible values correspond to the BlitMode value in the DefCore (see notice). This function returns the previously set blit mode."},"SetOwner":{"title":"SetOwner","returnType":"bool","paramData":["int","new_owner"],"params":1,"optional":true,"desc":"Changes the owner of the object."},"SetPhase":{"title":"SetPhase","returnType":"bool","paramData":["int","phase"],"params":1,"optional":true,"desc":"Sets the animation phase of the object."},"SetPhysical":{"title":"SetPhysical","returnType":"bool","paramData":["string","physical","int","value","int","mode"],"params":3,"optional":true,"desc":"Changes the physical properties of the object. With this, the values from the Physical section of the DefCore.txt can be permanently or temporarily adapted."},"SetPicture":{"title":"SetPicture","returnType":"void","paramData":["int","x","int","y","int","width","int","height"],"params":4,"optional":true,"desc":"Changes the representative picture of the object by setting it to a new source rectangle within the definition graphics. This picture is used e.g. in menus or the inventory. Also see the Picture entry in DefCore.txt."},"SetPlayerTeam":{"title":"SetPlayerTeam","returnType":"int","paramData":["int","player","int","new_team","bool","no_calls"],"params":3,"optional":true,"desc":"Assigns a player to a new team. The player limit (MaxPlayer) of the team will be considered."},"SetPlayerViewLock":{"title":"SetPlayerViewLock","returnType":"bool","paramData":["int","player","bool","locked"],"params":2,"optional":true,"desc":"Disabled or enabled locked view for one or all players. If the view is locked, the player cannot scroll around to explore the map."},"SetPlayerZoom":{"title":"SetPlayerZoom","returnType":"bool","paramData":["int","player","int","zoom","int","precision","int","flags"],"params":4,"optional":true,"desc":"Changes zoom or zoom limits vor all viewports of a player to direct values."},"SetPlayerZoomByViewRange":{"title":"SetPlayerZoomByViewRange","returnType":"bool","paramData":["int","player","int","range_x","int","range_y","int","flags"],"params":4,"optional":true,"desc":"Adjusts the zoom or zoom limit of all viewports of a player."},"SetPlayList":{"title":"SetPlayList","returnType":"int","paramData":["string","playlist"],"params":1,"optional":true,"desc":"Sets the play list of pieces of music to be played in random order, if music is activated. The actual number of pieces of music in the playlist is returned, or 0 in network mode."},"SetPlrExtraData":{"title":"SetPlrExtraData","returnType":"any","paramData":["int","player","string","data_name","any","Data"],"params":3,"optional":true,"desc":"With this function additional data can be saved in player's file. This can be used to preserve values across scenarios, for example for RPGs or highscores. If successful, the saved value is returned."},"SetPlrKnowledge":{"title":"SetPlrKnowledge","returnType":"int","paramData":["int","player","id","definition","bool","remove"],"params":3,"optional":true,"desc":"Gives a player a construction plan resp. removes the plan if remove is given."},"SetPlrMagic":{"title":"SetPlrMagic","returnType":"int","paramData":["int","player","id","id","bool","remove"],"params":3,"optional":true,"desc":"Adds or removes a magic spell to or from the list of available spells of a player."},"SetPlrView":{"title":"SetPlrView","returnType":"bool","paramData":["int","player","object","obj"],"params":2,"optional":true,"desc":"Centers a player's view to the specified object. The view will follow this object until the next player command."},"SetPlrViewRange":{"title":"SetPlrViewRange","returnType":"void","paramData":["int","range"],"params":1,"optional":true,"desc":"Sets the view distance of the object."},"SetPosition":{"title":"SetPosition","returnType":"void","paramData":["int","x","int","y","bool","check_bounds"],"params":3,"optional":true,"desc":"Moves the object to the specified position. This will set the exact pixel position and any internal sub-pixel offsets will be reset."},"SetProperty":{"title":"SetProperty","returnType":"bool","paramData":["string","key","any","value","proplist","obj"],"params":3,"optional":true,"desc":"Sets the property key of obj to value. The property does not have to exist beforehand."},"SetR":{"title":"SetR","returnType":"bool","paramData":["int","angle"],"params":1,"optional":true,"desc":"Sets the rotation of the object."},"SetRDir":{"title":"SetRDir","returnType":"bool","paramData":["int","rdir","int","precision"],"params":2,"optional":true,"desc":"Sets the rotation speed of the object."},"SetRGBaValue":{"title":"SetRGBaValue","returnType":"int","paramData":["int","Val","int","NewVal","int","select"],"params":3,"optional":true,"desc":"\n      Sets a single color value of a 32 bit color value. \n      \n        \n          select\n          Selection\n        \n        \n          0\n          Alpha value\n        \n        \n          1\n          Red value\n        \n        \n          2\n          Green value\n        \n        \n          3\n          Blue value\n        \n      \n\n    "},"SetScoreboardData":{"title":"SetScoreboardData","returnType":"bool","paramData":["int","row_id","int","coloumn_id","string","text","int","data"],"params":4,"optional":true,"desc":"Sets data in the scoreboard. The scoreboard is a global data table which can be used by scenarios to keep track of each player's score or other data. By default, the scoreboard can be displayed with the Tab key but display can also be controlled using DoScoreboardShow. The scoreboard is automatically created when data is set and automatically removed when all data is cleared. Data is set using a row and column index. If the row or column of a specified index does not yet exist, it is created as soon as data in this row or column is set. It does not matter which numeric indices you use as long as they are unique. So you could also use player numbers, player IDs (see GetPlayerID), or team IDs (see GetPlayerTeam) as row or column index. In order to prevent different object scripts from accidentally using the same row or column index you can use the ScoreboardCol function which will create a unique column index from a given value. In this case you should still take care that all object scripts accessing the scoreboard are using matching row indices. Rows and columnd are not sorted by row or column index. You can use the SortScoreboard function for user defined sorting."},"SetSeason":{"title":"SetSeason","returnType":"void","paramData":["int","season"],"params":1,"optional":true,"desc":"Sets the season."},"SetShape":{"title":"SetShape","returnType":"void","paramData":["int","x","int","y","int","width","int","height"],"params":4,"optional":true,"desc":"Changes the bounding rectangle of the object. This rectangle is used e.g. for collision or overlap detection. It does not affect object drawing."},"SetSkyAdjust":{"title":"SetSkyAdjust","returnType":"bool","paramData":["int","colorMod","int","backgroundColor"],"params":2,"optional":true,"desc":"Sets the sky color modulation. The sky colors will be mixed with the specified color as is done in ColorByOwner overlays."},"SetSkyParallax":{"title":"SetSkyParallax","returnType":"bool","paramData":["int","mode","int","xpar","int","ypar","int","xdir","int","ydir","int","x","int","y"],"params":7,"optional":true,"desc":"Changes parallaxity and scroll speed of the sky."},"SetSolidMask":{"title":"SetSolidMask","returnType":"void","paramData":["int","x","int","y","int","width","int","height","int","target_x","int","target_y"],"params":6,"optional":true,"desc":"Sets the solid area of an object. The source rectangle determines which pixels from the definition's SolidMask.png graphic should be used. All pixels within the rectangle of less than 50% transparency will be solid. Also see the SolidMask entry in DefCore.txt."},"SetSpeed":{"title":"SetSpeed","returnType":"bool","paramData":["int","xdir","int","ydir","int","precision"],"params":3,"optional":true,"desc":"Sets the speed of the object."},"SetTemperature":{"title":"SetTemperature","returnType":"void","paramData":["int","temperature"],"params":1,"optional":true,"desc":"Sets the global temperature."},"SetTransferZone":{"title":"SetTransferZone","returnType":"bool","paramData":["int","x","int","y","int","width","int","height"],"params":4,"optional":true,"desc":"Sets the transfer zone of the object. If the pathfinding trail of another object leads through this transfer zone (a transfer zone is always considered completely passable in pathfinding) ControlTransfer calls will be made to the transfer zone object for the passing clonk. In these calls, the necessary script commands should be given to the clonk so he can pass the object and reach his destination."},"SetVertex":{"title":"SetVertex","returnType":"int","paramData":["int","index","int","select","int","value","int","set_custom_permanent"],"params":4,"optional":true,"desc":"Sets the offset coordinates of a given object vertex (seeDefCore.txt). Coordinates are relative to the object center."},"SetVertexXY":{"title":"SetVertexXY","returnType":"bool","paramData":["int","index","int","xpos","int","ypos"],"params":3,"optional":true,"desc":"Sets both X and Y position of a vertex."},"SetViewOffset":{"title":"SetViewOffset","returnType":"bool","paramData":["int","player","int","x","int","x"],"params":3,"optional":true,"desc":"Moves the view of a player permanently by a given offset. Calling the function again will set a new offset. Calling the function with 0,0 parameters will reset to normal, centered view."},"SetWealth":{"title":"SetWealth","returnType":"bool","paramData":["int","player","int","value"],"params":2,"optional":true,"desc":"Sets the wealth value of a player."},"SetWind":{"title":"SetWind","returnType":"void","paramData":["int","strength"],"params":1,"optional":true,"desc":"Temporarily sets the global wind velocity and direction."},"SetXDir":{"title":"SetXDir","returnType":"bool","paramData":["int","xdir","int","precision"],"params":2,"optional":true,"desc":"Sets the horizontal speed of the object."},"SetYDir":{"title":"SetYDir","returnType":"bool","paramData":["int","ydir","int","precision"],"params":2,"optional":true,"desc":"Sets the vertical speed of the object."},"ShakeFree":{"title":"ShakeFree","returnType":"void","paramData":["int","x","int","y","int","radius"],"params":3,"optional":true,"desc":"Loosens instable material within a circular area. Loosened material will then begin to fall if there is room underneath. This can be used to collapse earth tunnels or similar."},"ShakeObjects":{"title":"ShakeObjects","returnType":"void","paramData":["int","x","int","y","int","radius"],"params":3,"optional":true,"desc":"Shakes all living beings within a given radius. This is comparable to calls to Fling() with low random values to all objects in the target area."},"ShiftContents":{"title":"ShiftContents","returnType":"bool","paramData":["bool","shift_back","id","target_id","bool","no_calls"],"params":3,"optional":true,"desc":"Resorts the contained objects so the next object with a differing ID will be in front. The most common application for this command is inventory selection."},"ShowInfo":{"title":"ShowInfo","returnType":"bool","paramData":[],"params":0,"desc":"Displays the description text of an object in a popup window (a menu window)."},"SimFlight":{"title":"SimFlight","returnType":"array","paramData":["int","x","int","y","int","xdir","int","ydir","int","min_density","int","max_density","int","iterations","int","precision"],"params":8,"optional":true,"desc":"Simulates the motion of a falling object with a given starting position and initial speed. The returned array will contain [int x_final, int y_final, int xdir_final, int ydir_final, int time_passed].  If the projected trajectory encounters a material of the specified density, the simulation will stop and time_passed will be non-negative. Otherwise, time_passed will be negative."},"Sin":{"title":"Sin","returnType":"int","paramData":["int","angle","int","radius","int","precision"],"params":3,"optional":true,"desc":"Returns sin(angle) * radius."},"Smoke":{"title":"Smoke","returnType":"bool","paramData":["int","x","int","y","int","level"],"params":3,"optional":true,"desc":"Creates smoke at the specified position."},"SortArray":{"title":"SortArray","returnType":"bool","paramData":["array","array2sort","bool","descending"],"params":2,"optional":true,"desc":"Sorts an array by its elements. Elements should be either all strings or all integers."},"SortArrayByArrayElement":{"title":"SortArrayByArrayElement","returnType":"bool","paramData":["array","array2sort","int","element_index","bool","descending"],"params":3,"optional":true,"desc":"Sorts an array of arrays by a subarray element. All elements must be arrays of at least element_index+1 size. Subarray elements should be either all strings or all integer."},"SortArrayByProperty":{"title":"SortArrayByProperty","returnType":"bool","paramData":["array","array2sort","string","property_name","bool","descending"],"params":3,"optional":true,"desc":"Sorts an array of proplists by a property. All elements must be proplists. Properties should be either all strings or all integer. If a property is not assigned, it is assumed to be integer zero."},"SortScoreboard":{"title":"SortScoreboard","returnType":"bool","paramData":["int","coloumn_id","bool","reverse"],"params":2,"optional":true,"desc":"Sorts scoreboard lines by the extra data of a column. If two entries have the same value in this column, no sorting is done. In this way you can sort these entries by additional columns in subsequent calls to this function."},"Sort_Distance":{"title":"Sort_Distance","returnType":"array","paramData":["int","x","int","y"],"params":2,"optional":true,"desc":"Sort criterion: Sorts the found objects by their distance to the indicated point. The nearest objects first."},"Sort_Func":{"title":"Sort_Func","returnType":"array","paramData":["string","function","","..."],"params":2,"optional":true,"desc":"Sort criterion: Sorts the found objects by the int result of the indicated function. Objects with smaller values first."},"Sort_Mass":{"title":"Sort_Mass","returnType":"array","paramData":[],"params":0,"desc":"Sort criterion: Sorts the found objects by their mass. The lightest objects first."},"Sort_Multiple":{"title":"Sort_Multiple","returnType":"array","paramData":["array","Criteria","","..."],"params":2,"optional":true,"desc":"Sort criterion: Makes it possible to sort with several criterions. The first criterion has the highest priority."},"Sort_Random":{"title":"Sort_Random","returnType":"array","paramData":[],"params":0,"desc":"Sort criterion: Sorts the found objects randomly."},"Sort_Reverse":{"title":"Sort_Reverse","returnType":"array","paramData":["array","iSort"],"params":1,"optional":true,"desc":"Sort modificator: Reverses the sorting of the given sort function."},"Sort_Speed":{"title":"Sort_Speed","returnType":"array","paramData":[],"params":0,"desc":"Sort criterion: Sorts the found objects by their speed. The slowest objects first."},"Sort_Value":{"title":"Sort_Value","returnType":"array","paramData":[],"params":0,"desc":"Sort criterion: Sorts the found objects by their value. The cheapest objects first."},"Sound":{"title":"Sound","returnType":"bool","paramData":["string","name","bool","global","int","volume","int","player","int","loop_count","int","custom_falloff_distance"],"params":6,"optional":true,"desc":"Plays a sound. The specified sound file has to be available in the group Sound.ocg, in the active scenario file, or in any loaded object definition. The audibility of object local sounds will depend on the position of the object relative to the visible viewports."},"SoundAt":{"title":"SoundAt","returnType":"bool","paramData":["string","name","int","x","int","y","int","volume","int","player","int","custom_falloff_distance"],"params":6,"optional":true,"desc":"Plays a sound at the specified position. The specified sound file has to be available in the group Sound.ocg, in the active scenario file, or in any loaded object definition."},"Split2Components":{"title":"Split2Components","returnType":"bool","paramData":[],"params":0,"desc":"Splits an object into its components. The new component objects will be created with random rotation and a low speed in random direction at the position at which the object was located. The original object is removed. If the original object was contained, the new component objects will be created in the original container."},"SplitRGBaValue":{"title":"SplitRGBaValue","returnType":"array","paramData":["int","rgba"],"params":1,"optional":true,"desc":"Returns an array with the red, green, blue, and alpha values of the specified 32 bit color value: [red, green, blue, alpha]"},"Sqrt":{"title":"Sqrt","returnType":"int","paramData":["int","value"],"params":1,"optional":true,"desc":"Returns the square root of the first parameter. If the parameter is less than 0, the result is 0."},"StartScriptProfiler":{"title":"StartScriptProfiler","returnType":"bool","paramData":["id","definition_script"],"params":1,"optional":true,"desc":"Starts the script profiler."},"StopAnimation":{"title":"StopAnimation","returnType":"bool","paramData":["int","animation_number"],"params":1,"optional":true,"desc":"Stops the animation corresponding to the given number (such as returned by PlayAnimation) and removes it from the corresponding slot in the animation stack. If there is a combination node associated to that number then both of the anmiations being combined are removed as well; if either or both of those are combination nodes again then they are also removed and so on. If the node to be removed is combined with another node then the combining node is also removed because there is not anything to combine anymore. The function returns true if the animation was removed or false otherwise (for example if there is no animation for the given number or if belongs to slot 0)."},"StopScriptProfiler":{"title":"StopScriptProfiler","returnType":"bool","paramData":[],"params":0,"desc":"Stops the script profiler and writes the result to the log."},"Stuck":{"title":"Stuck","returnType":"bool","paramData":[],"params":0,"desc":"Returns whether the object is stuck, meaning that one of its vertices is enclosed in solid matter."},"Tan":{"title":"Tan","returnType":"int","paramData":["int","angle","int","radius","int","precision"],"params":3,"optional":true,"desc":"Returns tan(angle) * radius."},"this":{},"ToggleBit":{"title":"ToggleBit","returnType":"int","paramData":["int","old_value","int","bit_number"],"params":2,"optional":true,"desc":"Returns the new bit masc with the bit at the indicated position flipped"},"TransformBone":{"title":"TransformBone","returnType":"int","paramData":["string","bone","array","transformation","int","slot","array","weight","int","sibling"],"params":5,"optional":true,"desc":"This function is very similar to PlayAnimation. Instead of playing an animation which is pre-defined in the skeleton of the mesh, it allows individual bones to be transformed arbitrarily. The transformation is inserted as a leaf node into the animation tree for the given slot. The return value of this function is the animation number of the animation node inserted which can be used to manipulate or remove the animation later. If there are already animations in the given slot then additionally a combination node is created. This combination node is assigned the returned number plus 1."},"Translate":{"title":"Translate","returnType":"string","paramData":["string","text"],"params":1,"optional":true,"desc":"Looks up a text in StringTbl??.txt of the calling script and returns its translation."},"Trans_Identity":{"title":"Trans_Identity","returnType":"array","paramData":[],"params":0,"desc":"Returns a 3x4 identity matrix. It can be used as a transformation for AttachMesh or for the \"PictureTransformation\" or \"MeshTransformation\" properties (see Meshes)."},"Trans_Mul":{"title":"Trans_Mul","returnType":"array","paramData":["array","first","array","second","array","..."],"params":3,"optional":true,"desc":"Multiplies two or more 3x4 transformation matrices in the given order. This way the effects of more than one transformation can be combined. The result can be used as a transformation for AttachMesh or for the \"PictureTransformation\" or \"MeshTransformation\" properties (see Meshes)."},"Trans_Rotate":{"title":"Trans_Rotate","returnType":"array","paramData":["int","angle","int","rx","int","ry","int","rz"],"params":4,"optional":true,"desc":"Returns a 3x4 rotation matrix around the axis given by the vector (rx, ry, rz) by angle degrees. It can be used as a transformation for AttachMesh or for the \"PictureTransformation\" or \"MeshTransformation\" properties (see Meshes)."},"Trans_Scale":{"title":"Trans_Scale","returnType":"array","paramData":["int","sx","int","sy","int","sz"],"params":3,"optional":true,"desc":"Returns a 3x4 scaling matrix. It can be used as a transformation for AttachMesh or for the \"PictureTransformation\" or \"MeshTransformation\" properties (see Meshes)."},"Trans_Translate":{"title":"Trans_Translate","returnType":"array","paramData":["int","dx","int","dy","int","dz"],"params":3,"optional":true,"desc":"Returns a 3x4 translation matrix. It can be used as a transformation for AttachMesh or for the \"PictureTransformation\" or \"MeshTransformation\" properties (see Meshes)."},"VerticesStuck":{"title":"VerticesStuck","returnType":"int","paramData":["object","obj"],"params":1,"optional":true,"desc":"Returns the number of stuck vertices of *obj"},"WildcardMatch":{"title":"WildcardMatch","returnType":"string","paramData":["string","text","string","wildcard"],"params":2,"optional":true,"desc":"Returns whether two strings are equal. The comparison is case sensitive and wildcards are supported."},"_inherited":{"title":"_inherited","returnType":"any","paramData":["any","..."],"params":1,"optional":true,"desc":"Calls the overloaded function. A function will overload another function if it is declared in the same scope with the same name. As opposed to inherited, this method is also failsafe, meaning it will not cause an error if the original function doesn't really exist."}}